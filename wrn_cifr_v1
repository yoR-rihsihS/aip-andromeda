{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QU5mfO1H_2sj"
      },
      "source": [
        "# Importing Required Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "PGtWScDeACLI"
      },
      "outputs": [],
      "source": [
        "import time\n",
        "import pickle\n",
        "import random\n",
        "import numpy as np\n",
        "from tqdm import tqdm\n",
        "from matplotlib import pyplot\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torchsummary import summary\n",
        "from torch.utils.data import Dataset, DataLoader, random_split"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jf6kPoQvUWUK"
      },
      "source": [
        "# Making Results Reproducible"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "btkbbBJ7lPLZ"
      },
      "outputs": [],
      "source": [
        "random_seed = 42\n",
        "torch.manual_seed(random_seed)\n",
        "np.random.seed(random_seed)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [],
      "source": [
        "device = 'cuda'\n",
        "# device = 'cpu'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T4iomoFzCh1N"
      },
      "source": [
        "# Reading The Dataset\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--2024-04-30 14:48:04--  https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\n",
            "Resolving www.cs.toronto.edu (www.cs.toronto.edu)... 128.100.3.30\n",
            "Connecting to www.cs.toronto.edu (www.cs.toronto.edu)|128.100.3.30|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 169001437 (161M) [application/x-gzip]\n",
            "Saving to: ‘cifar-100-python.tar.gz’\n",
            "\n",
            "cifar-100-python.ta 100%[===================>] 161.17M  9.56MB/s    in 18s     \n",
            "\n",
            "2024-04-30 14:48:24 (8.92 MB/s) - ‘cifar-100-python.tar.gz’ saved [169001437/169001437]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\n",
        "\n",
        "import tarfile\n",
        "with tarfile.open(\"./cifar-100-python.tar.gz\", \"r:gz\") as tar:\n",
        "    tar.extractall(path=\"./\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "dict_keys([b'filenames', b'batch_label', b'fine_labels', b'coarse_labels', b'data'])\n",
            "dict_keys([b'filenames', b'batch_label', b'fine_labels', b'coarse_labels', b'data'])\n"
          ]
        }
      ],
      "source": [
        "def unpickle(file):\n",
        "    with open(file, 'rb') as fo:\n",
        "        dict = pickle.load(fo, encoding='bytes')\n",
        "    return dict\n",
        "\n",
        "d1 = unpickle('./cifar-100-python/train')\n",
        "print(d1.keys())\n",
        "\n",
        "d2 = unpickle('./cifar-100-python/test')\n",
        "print(d2.keys())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [],
      "source": [
        "def get_tensor_data(data):\n",
        "    images = data[b'data']\n",
        "    labels = data[b'fine_labels']\n",
        "\n",
        "    N = images.shape[0]\n",
        "    images = images.reshape((N, 3, 32, 32))\n",
        "    labels = np.array(labels)\n",
        "\n",
        "    return torch.tensor(images, dtype=torch.float32) / 255.0, torch.tensor(labels)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [],
      "source": [
        "data_images, data_labels = get_tensor_data(d1)\n",
        "test_images, test_labels = get_tensor_data(d2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yEp3Mi2fDXym"
      },
      "source": [
        "# Showing Examples From Datasets For Sanity Checking"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "JEoHi4ieDgih"
      },
      "outputs": [],
      "source": [
        "def show_example(image, label):\n",
        "  print(\"Label :\", label.item())\n",
        "  pyplot.imshow(image.permute((1, 2, 0)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "jSjhGWo2p6lk",
        "outputId": "532cde98-74e5-4429-8528-5754f3fe52f5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "index = 27121\n",
            "Label : 40\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "index = random.randint(0, 50000)\n",
        "print(\"index =\", index)\n",
        "show_example(data_images[index], data_labels[index])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "ufYnogD8p6v7",
        "outputId": "36f9b2b9-6e9e-4fb0-a05c-7b10c1211ff8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "index = 7393\n",
            "Label : 96\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "index = random.randint(0, 10000)\n",
        "print(\"index =\", index)\n",
        "show_example(test_images[index], test_labels[index])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cEEfXXHUHe7h"
      },
      "source": [
        "# Loading The Datset For Training Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "4iFmbX9hutJO"
      },
      "outputs": [],
      "source": [
        "train_examples = 45000\n",
        "validation_examples = 5000\n",
        "\n",
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, images, labels):\n",
        "        self.X = images\n",
        "        self.Y = labels\n",
        "\n",
        "    def __len__(self):\n",
        "        return self.X.shape[0]\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        return (self.X[index], self.Y[index])\n",
        "\n",
        "\n",
        "dataset = CustomDataset(data_images, data_labels)\n",
        "train_set, validation_set = random_split(dataset, [train_examples, validation_examples])\n",
        "test_set = CustomDataset(test_images, test_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JKkr8K7ymYhn"
      },
      "source": [
        "# Defining The Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [],
      "source": [
        "class Wide_ResNet(nn.Module):\n",
        "    def __init__(self, width = 4, dropout = 0.33, num_classes=100):\n",
        "        super().__init__()\n",
        "\n",
        "        self.block0 = nn.Sequential(\n",
        "            nn.Conv2d(3, 16, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(16),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.block11 = nn.Sequential(\n",
        "            nn.Conv2d(16, 16*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "        )\n",
        "        self.shortcut1 = nn.Conv2d(16, 16*width, kernel_size=1, stride=2)\n",
        "        self.block12 = nn.Sequential(\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "        )\n",
        "\n",
        "\n",
        "        self.pre_block2 = nn.Sequential(\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "        self.block21 = nn.Sequential(\n",
        "            nn.Conv2d(16*width, 32*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "        )\n",
        "        self.shortcut2 = nn.Conv2d(16*width, 32*width, kernel_size=1, stride=2)\n",
        "        self.block22 = nn.Sequential(\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "        )\n",
        "\n",
        "        self.pre_block3 = nn.Sequential(\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "        self.block31 = nn.Sequential(\n",
        "            nn.Conv2d(32*width, 64*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "        )\n",
        "        self.shortcut3 = nn.Conv2d(32*width, 64*width, kernel_size=1, stride=2)\n",
        "        self.block32 = nn.Sequential(\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "        )\n",
        "\n",
        "        self.pool_block = nn.Sequential(\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.AvgPool2d(4, 4), # Depending on Dataset this should change\n",
        "        )\n",
        "\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Linear(64*width, 64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout1d(dropout/2),\n",
        "            nn.Linear(64*width, num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        # x.shape = B x 3 x 32 x 32\n",
        "\n",
        "        x = self.block0(x)\n",
        "        # x.shape = B x 16 x 32 x 32\n",
        "\n",
        "        x1 = self.block11(x)\n",
        "        x2 = self.shortcut1(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block12(x3)\n",
        "        x = x3 + x4\n",
        "        # x.shape = B x 16*width x 16 x 16\n",
        "\n",
        "        x = self.pre_block2(x)\n",
        "        x1 = self.block21(x)\n",
        "        x2 = self.shortcut2(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block22(x3)\n",
        "        x = x3 + x4\n",
        "        # x.shape = B x 32*width x 8 x 8\n",
        "\n",
        "        x = self.pre_block3(x)\n",
        "        x1 = self.block31(x)\n",
        "        x2 = self.shortcut3(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block32(x3)\n",
        "        x = x3 + x4\n",
        "        # x.shape = B x 64*width x 4 x 4\n",
        "\n",
        "        x = self.pool_block(x)\n",
        "        # x.shape = B x 64*width x 1 x 1\n",
        "\n",
        "        x = torch.flatten(x, start_dim=1)\n",
        "        # flatten all dimensions except batch (0th dim)\n",
        "        # x.shape = B x 64*width\n",
        "\n",
        "        x = self.fc(x)\n",
        "        # x.shape = B x num_classes\n",
        "\n",
        "        return x\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8kWoQnKzwEvQ"
      },
      "source": [
        "# Helper Functions to Train and Test the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [],
      "source": [
        "def validate(model, validation_loader, loss_fn):\n",
        "  validation_loss = 0.0\n",
        "  validation_correct = 0\n",
        "  model.eval()\n",
        "  with torch.no_grad(): \n",
        "    for j, (x_val, y_val) in enumerate(validation_loader):\n",
        "      x_val = x_val.to(device)\n",
        "      y_val = y_val.to(device)\n",
        "\n",
        "      y_pred = model(x_val)\n",
        "      loss = loss_fn(y_pred, y_val)\n",
        "\n",
        "      predicted = torch.argmax(y_pred.data, dim=1)\n",
        "      validation_correct += (predicted == y_val).sum().item()\n",
        "      validation_loss += loss.item()\n",
        "\n",
        "  return validation_loss, validation_correct"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [],
      "source": [
        "def test(model, test_loader):\n",
        "  top1_correct = 0\n",
        "  top5_correct = 0\n",
        "  model.eval()\n",
        "  with torch.no_grad(): \n",
        "    for j, (x_val, y_val) in enumerate(test_loader):\n",
        "      x_val = x_val.to(device)\n",
        "      y_val = y_val.to(device)\n",
        "\n",
        "      y_pred = model(x_val)\n",
        "\n",
        "      predicted = torch.argmax(y_pred.data, dim=1)\n",
        "      top1_correct += (predicted == y_val).sum().item()\n",
        "\n",
        "      val, ind = torch.topk(y_pred.data, 5, dim=1, largest=True, sorted=True)\n",
        "      for i in range(5):\n",
        "        top5_correct += (ind[ :, i] == y_val).sum().item()\n",
        "\n",
        "  return top1_correct / 100, top5_correct / 100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "pacEFSU7TLm7"
      },
      "outputs": [],
      "source": [
        "def train(model, optimizer, scheduler, loss_fn, train_loader, validation_loader, test_loader, learning_rate, num_epochs):\n",
        "  history = {'train_loss' : [], 'val_loss' : [], 'train_acc' : [], 'val_acc' : [], 'test_acc1' : [], 'test_acc5' : []}\n",
        "  optimizer = optimizer(model.parameters(), learning_rate, momentum=0.9, nesterov=True)\n",
        "  scheduler = scheduler(optimizer, T_max=len(train_loader)*num_epochs)\n",
        "\n",
        "  for epoch in tqdm(range(num_epochs)):\n",
        "    model.train()\n",
        "    train_loss = 0.0\n",
        "    train_correct = 0\n",
        "    for i, (x_batch, y_batch) in enumerate(train_loader):\n",
        "      x_batch = x_batch.to(device)\n",
        "      y_batch = y_batch.to(device)\n",
        "\n",
        "      y_pred = model(x_batch)\n",
        "      loss = loss_fn(y_pred, y_batch)\n",
        "\n",
        "      optimizer.zero_grad()\n",
        "      loss.backward()\n",
        "      optimizer.step()\n",
        "      scheduler.step()\n",
        "\n",
        "      predicted = torch.argmax(y_pred.data, dim=1)\n",
        "      train_correct += (predicted == y_batch).sum().item()\n",
        "      train_loss += loss.item()\n",
        "      \n",
        "    # Validation Step\n",
        "    validation_loss, validation_correct = validate(model, validation_loader, loss_fn)\n",
        "\n",
        "    print(\"Epoch\", epoch+1, \"-\\tTraining Loss :\", train_loss/train_examples, \"\\tValidation Loss :\", validation_loss/validation_examples)\n",
        "    history['train_loss'].append(train_loss / train_examples)\n",
        "    history['val_loss'].append(validation_loss / validation_examples)\n",
        "    history['train_acc'].append(100 * train_correct / train_examples)\n",
        "    history['val_acc'].append(100 * validation_correct / validation_examples)\n",
        "\n",
        "    # Test Step every 5th epoch\n",
        "    if (epoch % 5) == 4:\n",
        "      top1, top5 = test(model, test_loader)\n",
        "      history['test_acc1'].append(top1)\n",
        "      history['test_acc5'].append(top5)\n",
        "\n",
        "      print(\"Training Accuracy =\", 100 * train_correct / train_examples,\n",
        "            \"\\tValidation Accuracy =\", 100 * validation_correct / validation_examples,\n",
        "            \"\\tTest Accuracy Top1 =\", top1, \"\\tTest Accuracy Top5 =\", top5)\n",
        "\n",
        "  return history"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "eszEjkeB_kD_"
      },
      "outputs": [],
      "source": [
        "def plot_loss(train_loss, val_loss):\n",
        "  pyplot.plot(train_loss, '-b')\n",
        "  pyplot.plot(val_loss, '-r')\n",
        "  pyplot.xlabel('epoch')\n",
        "  pyplot.ylabel('loss')\n",
        "  pyplot.legend(['Training', 'Validation'])\n",
        "  pyplot.title('Loss vs. No. of epochs')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "Q9kq7ZvWr8k-"
      },
      "outputs": [],
      "source": [
        "def plot_acc(train_acc, val_acc):\n",
        "  pyplot.plot(train_acc, '-b')\n",
        "  pyplot.plot(val_acc, '-r')\n",
        "  pyplot.xlabel('epoch')\n",
        "  pyplot.ylabel('acurracy')\n",
        "  pyplot.legend(['Training', 'Validation'])\n",
        "  pyplot.title('Acurracy vs. No. of epochs')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [],
      "source": [
        "def plot_test(test_acc1, test_acc5):\n",
        "  x = range(5, 201, 5)\n",
        "  x = x[ : len(test_acc1)]\n",
        "  pyplot.plot(x, test_acc1, '-b')\n",
        "  pyplot.plot(x, test_acc5, '-r')\n",
        "  pyplot.xlabel('epoch')\n",
        "  pyplot.ylabel('accuracy')\n",
        "  pyplot.legend(['Top1 Accuracy', 'Top5 Accuracy'])\n",
        "  pyplot.title('Accuracy vs. No. of epochs')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cEmpR2syZA1L"
      },
      "source": [
        "# Training the models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 16, 32, 32]             448\n",
            "       BatchNorm2d-2           [-1, 16, 32, 32]              32\n",
            "              ReLU-3           [-1, 16, 32, 32]               0\n",
            "            Conv2d-4          [-1, 128, 16, 16]          18,560\n",
            "       BatchNorm2d-5          [-1, 128, 16, 16]             256\n",
            "              ReLU-6          [-1, 128, 16, 16]               0\n",
            "         Dropout2d-7          [-1, 128, 16, 16]               0\n",
            "            Conv2d-8          [-1, 128, 16, 16]         147,584\n",
            "            Conv2d-9          [-1, 128, 16, 16]           2,176\n",
            "      BatchNorm2d-10          [-1, 128, 16, 16]             256\n",
            "             ReLU-11          [-1, 128, 16, 16]               0\n",
            "           Conv2d-12          [-1, 128, 16, 16]         147,584\n",
            "      BatchNorm2d-13          [-1, 128, 16, 16]             256\n",
            "             ReLU-14          [-1, 128, 16, 16]               0\n",
            "        Dropout2d-15          [-1, 128, 16, 16]               0\n",
            "           Conv2d-16          [-1, 128, 16, 16]         147,584\n",
            "      BatchNorm2d-17          [-1, 128, 16, 16]             256\n",
            "             ReLU-18          [-1, 128, 16, 16]               0\n",
            "           Conv2d-19            [-1, 256, 8, 8]         295,168\n",
            "      BatchNorm2d-20            [-1, 256, 8, 8]             512\n",
            "             ReLU-21            [-1, 256, 8, 8]               0\n",
            "        Dropout2d-22            [-1, 256, 8, 8]               0\n",
            "           Conv2d-23            [-1, 256, 8, 8]         590,080\n",
            "           Conv2d-24            [-1, 256, 8, 8]          33,024\n",
            "      BatchNorm2d-25            [-1, 256, 8, 8]             512\n",
            "             ReLU-26            [-1, 256, 8, 8]               0\n",
            "           Conv2d-27            [-1, 256, 8, 8]         590,080\n",
            "      BatchNorm2d-28            [-1, 256, 8, 8]             512\n",
            "             ReLU-29            [-1, 256, 8, 8]               0\n",
            "        Dropout2d-30            [-1, 256, 8, 8]               0\n",
            "           Conv2d-31            [-1, 256, 8, 8]         590,080\n",
            "      BatchNorm2d-32            [-1, 256, 8, 8]             512\n",
            "             ReLU-33            [-1, 256, 8, 8]               0\n",
            "           Conv2d-34            [-1, 512, 4, 4]       1,180,160\n",
            "      BatchNorm2d-35            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-36            [-1, 512, 4, 4]               0\n",
            "        Dropout2d-37            [-1, 512, 4, 4]               0\n",
            "           Conv2d-38            [-1, 512, 4, 4]       2,359,808\n",
            "           Conv2d-39            [-1, 512, 4, 4]         131,584\n",
            "      BatchNorm2d-40            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-41            [-1, 512, 4, 4]               0\n",
            "           Conv2d-42            [-1, 512, 4, 4]       2,359,808\n",
            "      BatchNorm2d-43            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-44            [-1, 512, 4, 4]               0\n",
            "        Dropout2d-45            [-1, 512, 4, 4]               0\n",
            "           Conv2d-46            [-1, 512, 4, 4]       2,359,808\n",
            "      BatchNorm2d-47            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-48            [-1, 512, 4, 4]               0\n",
            "        AvgPool2d-49            [-1, 512, 1, 1]               0\n",
            "           Linear-50                  [-1, 512]         262,656\n",
            "             ReLU-51                  [-1, 512]               0\n",
            "        Dropout1d-52                  [-1, 512]               0\n",
            "           Linear-53                  [-1, 100]          51,300\n",
            "================================================================\n",
            "Total params: 11,274,692\n",
            "Trainable params: 11,274,692\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.01\n",
            "Forward/backward pass size (MB): 6.95\n",
            "Params size (MB): 43.01\n",
            "Estimated Total Size (MB): 49.98\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "model1 = Wide_ResNet(width=8, dropout=0.5).to(device)\n",
        "summary(model1, (3, 32, 32))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BbWT3zaBdtak",
        "outputId": "42092dd0-d81e-4587-eef2-ac9bc7917f63"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/data/home1/shishirm/.local/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
            "  from .autonotebook import tqdm as notebook_tqdm\n",
            "  1%|          | 1/100 [00:09<15:34,  9.44s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1 -\tTraining Loss : 0.03455878278944227 \tValidation Loss : 0.016735616302490236\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  2%|▏         | 2/100 [00:18<14:50,  9.08s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 2 -\tTraining Loss : 0.03179497732056512 \tValidation Loss : 0.015152401351928711\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  3%|▎         | 3/100 [00:27<14:39,  9.07s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 3 -\tTraining Loss : 0.03067376029226515 \tValidation Loss : 0.01474984908103943\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  4%|▍         | 4/100 [00:35<14:11,  8.86s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 4 -\tTraining Loss : 0.029680750285254586 \tValidation Loss : 0.013802925729751586\n",
            "Epoch 5 -\tTraining Loss : 0.028695135937796698 \tValidation Loss : 0.013574573373794556\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  5%|▌         | 5/100 [00:45<14:32,  9.18s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 13.69111111111111 \tValidation Accuracy = 18.48 \tTest Accuracy Top1 = 18.6 \tTest Accuracy Top5 = 46.72\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  6%|▌         | 6/100 [00:54<14:03,  8.97s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 6 -\tTraining Loss : 0.027895680973264905 \tValidation Loss : 0.013601515197753907\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  7%|▋         | 7/100 [01:03<13:50,  8.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 7 -\tTraining Loss : 0.027149907721413506 \tValidation Loss : 0.012231648015975953\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  8%|▊         | 8/100 [01:11<13:36,  8.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 8 -\tTraining Loss : 0.026472046762042574 \tValidation Loss : 0.011660691738128661\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  9%|▉         | 9/100 [01:20<13:26,  8.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 9 -\tTraining Loss : 0.025880120865503946 \tValidation Loss : 0.011360246372222901\n",
            "Epoch 10 -\tTraining Loss : 0.025378496816423204 \tValidation Loss : 0.011207175731658936\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 10%|█         | 10/100 [01:30<13:32,  9.03s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 21.77111111111111 \tValidation Accuracy = 30.08 \tTest Accuracy Top1 = 30.46 \tTest Accuracy Top5 = 61.76\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█         | 11/100 [01:38<13:12,  8.90s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 11 -\tTraining Loss : 0.024809996101591323 \tValidation Loss : 0.010709817790985107\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 12%|█▏        | 12/100 [01:47<13:02,  8.89s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 12 -\tTraining Loss : 0.02427731286684672 \tValidation Loss : 0.010400650548934937\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 13%|█▎        | 13/100 [01:56<12:52,  8.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 13 -\tTraining Loss : 0.023836762873331706 \tValidation Loss : 0.010653302192687989\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 14%|█▍        | 14/100 [02:05<12:39,  8.83s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 14 -\tTraining Loss : 0.02332714181476169 \tValidation Loss : 0.010109143114089966\n",
            "Epoch 15 -\tTraining Loss : 0.022827370580037434 \tValidation Loss : 0.009544767808914185\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 15%|█▌        | 15/100 [02:14<12:43,  8.98s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 28.426666666666666 \tValidation Accuracy = 39.34 \tTest Accuracy Top1 = 39.89 \tTest Accuracy Top5 = 71.59\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 16%|█▌        | 16/100 [02:23<12:29,  8.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 16 -\tTraining Loss : 0.022529648547702365 \tValidation Loss : 0.00935249481201172\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 17%|█▋        | 17/100 [02:31<12:05,  8.74s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 17 -\tTraining Loss : 0.021979510280821058 \tValidation Loss : 0.010777772426605225\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 18%|█▊        | 18/100 [02:40<11:57,  8.75s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 18 -\tTraining Loss : 0.021678841310077242 \tValidation Loss : 0.009025485467910767\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 19%|█▉        | 19/100 [02:48<11:46,  8.72s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 19 -\tTraining Loss : 0.021221269422107274 \tValidation Loss : 0.008453791618347167\n",
            "Epoch 20 -\tTraining Loss : 0.020858136309517755 \tValidation Loss : 0.008431696963310241\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 20%|██        | 20/100 [02:58<11:58,  8.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 33.611111111111114 \tValidation Accuracy = 44.28 \tTest Accuracy Top1 = 45.77 \tTest Accuracy Top5 = 76.63\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 21%|██        | 21/100 [03:07<11:45,  8.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 21 -\tTraining Loss : 0.02059871442053053 \tValidation Loss : 0.008230107212066651\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 22/100 [03:16<11:36,  8.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 22 -\tTraining Loss : 0.02022843451499939 \tValidation Loss : 0.008153218030929565\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 23%|██▎       | 23/100 [03:24<11:17,  8.80s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 23 -\tTraining Loss : 0.020000011910332575 \tValidation Loss : 0.008045926213264465\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 24%|██▍       | 24/100 [03:33<11:04,  8.75s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 24 -\tTraining Loss : 0.019645405313703748 \tValidation Loss : 0.007855401539802551\n",
            "Epoch 25 -\tTraining Loss : 0.019378578811221653 \tValidation Loss : 0.008117946767807006\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 25%|██▌       | 25/100 [03:42<11:07,  8.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 38.404444444444444 \tValidation Accuracy = 45.86 \tTest Accuracy Top1 = 47.0 \tTest Accuracy Top5 = 77.09\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 26%|██▌       | 26/100 [03:51<11:01,  8.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 26 -\tTraining Loss : 0.019067031598091127 \tValidation Loss : 0.007621705174446106\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 27%|██▋       | 27/100 [04:00<10:49,  8.89s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 27 -\tTraining Loss : 0.018802933271725972 \tValidation Loss : 0.007470541191101074\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 28%|██▊       | 28/100 [04:09<10:33,  8.80s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 28 -\tTraining Loss : 0.018522196904818218 \tValidation Loss : 0.007430339956283569\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 29%|██▉       | 29/100 [04:17<10:18,  8.71s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 29 -\tTraining Loss : 0.018169188952445983 \tValidation Loss : 0.007375364947319031\n",
            "Epoch 30 -\tTraining Loss : 0.0179161482863956 \tValidation Loss : 0.007396375012397766\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 30%|███       | 30/100 [04:26<10:22,  8.89s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 42.52444444444444 \tValidation Accuracy = 50.26 \tTest Accuracy Top1 = 50.84 \tTest Accuracy Top5 = 80.69\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 31%|███       | 31/100 [04:35<10:08,  8.82s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 31 -\tTraining Loss : 0.01764775587717692 \tValidation Loss : 0.007402253556251526\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 32%|███▏      | 32/100 [04:44<09:59,  8.82s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 32 -\tTraining Loss : 0.017397083030806646 \tValidation Loss : 0.0072659241437911986\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 33%|███▎      | 33/100 [04:53<09:51,  8.82s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 33 -\tTraining Loss : 0.017219661484824286 \tValidation Loss : 0.007092568755149842\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▍      | 34/100 [05:01<09:36,  8.73s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 34 -\tTraining Loss : 0.016990813869900173 \tValidation Loss : 0.006957775926589966\n",
            "Epoch 35 -\tTraining Loss : 0.016711343672540454 \tValidation Loss : 0.006870145654678345\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 35%|███▌      | 35/100 [05:11<09:39,  8.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 46.595555555555556 \tValidation Accuracy = 52.8 \tTest Accuracy Top1 = 53.22 \tTest Accuracy Top5 = 82.35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 36%|███▌      | 36/100 [05:19<09:25,  8.83s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 36 -\tTraining Loss : 0.016554199692938063 \tValidation Loss : 0.008175540494918823\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 37%|███▋      | 37/100 [05:28<09:12,  8.78s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 37 -\tTraining Loss : 0.016310368643866646 \tValidation Loss : 0.006881664156913757\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 38%|███▊      | 38/100 [05:36<09:00,  8.72s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 38 -\tTraining Loss : 0.016060739286740622 \tValidation Loss : 0.006785620450973511\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 39%|███▉      | 39/100 [05:46<09:00,  8.86s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 39 -\tTraining Loss : 0.015897754640049406 \tValidation Loss : 0.006941343426704407\n",
            "Epoch 40 -\tTraining Loss : 0.015570362427499559 \tValidation Loss : 0.006874969792366028\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 40%|████      | 40/100 [05:55<08:57,  8.95s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 50.41777777777778 \tValidation Accuracy = 52.4 \tTest Accuracy Top1 = 53.79 \tTest Accuracy Top5 = 82.03\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 41%|████      | 41/100 [06:04<08:47,  8.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 41 -\tTraining Loss : 0.01538511864344279 \tValidation Loss : 0.006759440183639527\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 42%|████▏     | 42/100 [06:13<08:43,  9.02s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 42 -\tTraining Loss : 0.015157475590705871 \tValidation Loss : 0.006651937317848205\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 43%|████▎     | 43/100 [06:22<08:31,  8.97s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 43 -\tTraining Loss : 0.01500781217681037 \tValidation Loss : 0.0068790029287338255\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 44%|████▍     | 44/100 [06:31<08:21,  8.95s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 44 -\tTraining Loss : 0.014869473089112175 \tValidation Loss : 0.006796295666694641\n",
            "Epoch 45 -\tTraining Loss : 0.014708341712421842 \tValidation Loss : 0.006730750250816345\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▌     | 45/100 [06:40<08:17,  9.04s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 53.32888888888889 \tValidation Accuracy = 53.6 \tTest Accuracy Top1 = 54.81 \tTest Accuracy Top5 = 83.26\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 46%|████▌     | 46/100 [06:48<08:00,  8.90s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 46 -\tTraining Loss : 0.01444127262963189 \tValidation Loss : 0.006641438722610474\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 47%|████▋     | 47/100 [06:57<07:52,  8.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 47 -\tTraining Loss : 0.014182385163837009 \tValidation Loss : 0.00663730115890503\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 48%|████▊     | 48/100 [07:06<07:41,  8.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 48 -\tTraining Loss : 0.01404515401787228 \tValidation Loss : 0.0071541557550430296\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 49%|████▉     | 49/100 [07:15<07:27,  8.78s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 49 -\tTraining Loss : 0.013734704245461358 \tValidation Loss : 0.006642003846168518\n",
            "Epoch 50 -\tTraining Loss : 0.013697140333387587 \tValidation Loss : 0.0071375308036804195\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 50%|█████     | 50/100 [07:24<07:31,  9.04s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 56.89555555555555 \tValidation Accuracy = 52.36 \tTest Accuracy Top1 = 53.49 \tTest Accuracy Top5 = 81.26\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 51%|█████     | 51/100 [07:33<07:16,  8.90s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 51 -\tTraining Loss : 0.013453002132309808 \tValidation Loss : 0.0070399760723114015\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 52%|█████▏    | 52/100 [07:42<07:04,  8.85s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 52 -\tTraining Loss : 0.013314553425047133 \tValidation Loss : 0.006612648844718933\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 53%|█████▎    | 53/100 [07:50<06:53,  8.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 53 -\tTraining Loss : 0.013093705561425951 \tValidation Loss : 0.006649231624603271\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 54%|█████▍    | 54/100 [07:59<06:45,  8.81s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 54 -\tTraining Loss : 0.01284308545589447 \tValidation Loss : 0.0069455983877182\n",
            "Epoch 55 -\tTraining Loss : 0.012886036115222507 \tValidation Loss : 0.006687100195884705\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 55%|█████▌    | 55/100 [08:09<06:44,  8.98s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 59.8 \tValidation Accuracy = 54.66 \tTest Accuracy Top1 = 55.94 \tTest Accuracy Top5 = 83.76\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 56/100 [08:17<06:32,  8.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 56 -\tTraining Loss : 0.012644913183318245 \tValidation Loss : 0.006744661784172058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 57%|█████▋    | 57/100 [08:26<06:21,  8.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 57 -\tTraining Loss : 0.0123969739596049 \tValidation Loss : 0.006806810641288757\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 58%|█████▊    | 58/100 [08:35<06:12,  8.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 58 -\tTraining Loss : 0.012450517898135715 \tValidation Loss : 0.007047789525985718\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 59%|█████▉    | 59/100 [08:44<06:06,  8.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 59 -\tTraining Loss : 0.012311179937256706 \tValidation Loss : 0.00681547954082489\n",
            "Epoch 60 -\tTraining Loss : 0.012077399847242567 \tValidation Loss : 0.006799038481712341\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 60%|██████    | 60/100 [08:53<06:02,  9.07s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 62.733333333333334 \tValidation Accuracy = 55.12 \tTest Accuracy Top1 = 56.12 \tTest Accuracy Top5 = 83.96\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 61%|██████    | 61/100 [09:02<05:49,  8.95s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 61 -\tTraining Loss : 0.011901659313837687 \tValidation Loss : 0.00682578113079071\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 62%|██████▏   | 62/100 [09:11<05:39,  8.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 62 -\tTraining Loss : 0.011842644561661614 \tValidation Loss : 0.006967841362953186\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 63%|██████▎   | 63/100 [09:20<05:27,  8.84s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 63 -\tTraining Loss : 0.011646303383509318 \tValidation Loss : 0.006916401410102844\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 64%|██████▍   | 64/100 [09:28<05:14,  8.73s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 64 -\tTraining Loss : 0.01163072202735477 \tValidation Loss : 0.006854861497879028\n",
            "Epoch 65 -\tTraining Loss : 0.011450587036874559 \tValidation Loss : 0.006966558814048767\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 65%|██████▌   | 65/100 [09:37<05:11,  8.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 65.2688888888889 \tValidation Accuracy = 55.42 \tTest Accuracy Top1 = 56.2 \tTest Accuracy Top5 = 83.82\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 66%|██████▌   | 66/100 [09:46<05:02,  8.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 66 -\tTraining Loss : 0.011334653969605764 \tValidation Loss : 0.0068470715761184695\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 67%|██████▋   | 67/100 [09:55<04:52,  8.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 67 -\tTraining Loss : 0.011389482859770457 \tValidation Loss : 0.006886210918426514\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 68%|██████▊   | 68/100 [10:04<04:43,  8.86s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 68 -\tTraining Loss : 0.011193740848700206 \tValidation Loss : 0.007028424286842346\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 69%|██████▉   | 69/100 [10:13<04:36,  8.90s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 69 -\tTraining Loss : 0.011068155576123132 \tValidation Loss : 0.0069957425594329836\n",
            "Epoch 70 -\tTraining Loss : 0.010968470655547248 \tValidation Loss : 0.0070588899850845335\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 70%|███████   | 70/100 [10:22<04:32,  9.08s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 67.32 \tValidation Accuracy = 55.34 \tTest Accuracy Top1 = 56.45 \tTest Accuracy Top5 = 83.65\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 71%|███████   | 71/100 [10:31<04:19,  8.96s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 71 -\tTraining Loss : 0.01100066414144304 \tValidation Loss : 0.00698367931842804\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 72%|███████▏  | 72/100 [10:40<04:12,  9.01s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 72 -\tTraining Loss : 0.010974146024386087 \tValidation Loss : 0.007088932108879089\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 73%|███████▎  | 73/100 [10:49<04:03,  9.00s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 73 -\tTraining Loss : 0.010772635666529338 \tValidation Loss : 0.007020115447044372\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 74%|███████▍  | 74/100 [10:59<03:56,  9.08s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 74 -\tTraining Loss : 0.01075315336253908 \tValidation Loss : 0.007064844179153443\n",
            "Epoch 75 -\tTraining Loss : 0.010727702967325847 \tValidation Loss : 0.007041816520690918\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 75%|███████▌  | 75/100 [11:08<03:49,  9.19s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 68.37777777777778 \tValidation Accuracy = 55.58 \tTest Accuracy Top1 = 56.8 \tTest Accuracy Top5 = 84.25\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 76%|███████▌  | 76/100 [11:17<03:39,  9.13s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 76 -\tTraining Loss : 0.010689888155460358 \tValidation Loss : 0.00706978657245636\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 77%|███████▋  | 77/100 [11:26<03:28,  9.06s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 77 -\tTraining Loss : 0.010538780997859107 \tValidation Loss : 0.007129496955871582\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 78%|███████▊  | 78/100 [11:35<03:19,  9.09s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 78 -\tTraining Loss : 0.010422985296779208 \tValidation Loss : 0.00709260606765747\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 79%|███████▉  | 79/100 [11:44<03:10,  9.05s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 79 -\tTraining Loss : 0.010431325520409478 \tValidation Loss : 0.007129886150360107\n",
            "Epoch 80 -\tTraining Loss : 0.010479669222566816 \tValidation Loss : 0.007155717778205872\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 80%|████████  | 80/100 [11:53<03:02,  9.11s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 69.44666666666667 \tValidation Accuracy = 55.92 \tTest Accuracy Top1 = 56.64 \tTest Accuracy Top5 = 83.94\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 81%|████████  | 81/100 [12:02<02:52,  9.09s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 81 -\tTraining Loss : 0.01038376672135459 \tValidation Loss : 0.007207915735244751\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 82%|████████▏ | 82/100 [12:11<02:41,  8.95s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 82 -\tTraining Loss : 0.010404556777742173 \tValidation Loss : 0.007190215349197388\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 83%|████████▎ | 83/100 [12:20<02:32,  8.96s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 83 -\tTraining Loss : 0.01033788790040546 \tValidation Loss : 0.00716119441986084\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 84%|████████▍ | 84/100 [12:29<02:26,  9.16s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 84 -\tTraining Loss : 0.010319145936436123 \tValidation Loss : 0.007199077248573303\n",
            "Epoch 85 -\tTraining Loss : 0.010343777779738108 \tValidation Loss : 0.0071850690364837645\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 85%|████████▌ | 85/100 [12:39<02:19,  9.30s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 70.13333333333334 \tValidation Accuracy = 55.98 \tTest Accuracy Top1 = 56.93 \tTest Accuracy Top5 = 84.1\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 86%|████████▌ | 86/100 [12:48<02:09,  9.23s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 86 -\tTraining Loss : 0.010328816009892357 \tValidation Loss : 0.007267628622055054\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 87%|████████▋ | 87/100 [12:57<01:58,  9.10s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 87 -\tTraining Loss : 0.01033358624511295 \tValidation Loss : 0.007226437258720398\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 88%|████████▊ | 88/100 [13:06<01:48,  9.04s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 88 -\tTraining Loss : 0.010274012205335829 \tValidation Loss : 0.007232065606117249\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 89%|████████▉ | 89/100 [13:16<01:41,  9.21s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 89 -\tTraining Loss : 0.010201429720719656 \tValidation Loss : 0.00724529037475586\n",
            "Epoch 90 -\tTraining Loss : 0.010262674538294474 \tValidation Loss : 0.007244440269470215\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 90%|█████████ | 90/100 [13:25<01:33,  9.40s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 70.50444444444445 \tValidation Accuracy = 55.82 \tTest Accuracy Top1 = 56.88 \tTest Accuracy Top5 = 84.01\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 91%|█████████ | 91/100 [13:35<01:23,  9.33s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 91 -\tTraining Loss : 0.010185466645823585 \tValidation Loss : 0.007251495218276977\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 92%|█████████▏| 92/100 [13:44<01:13,  9.24s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 92 -\tTraining Loss : 0.010262494389216106 \tValidation Loss : 0.007249470639228821\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 93%|█████████▎| 93/100 [13:52<01:03,  9.12s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 93 -\tTraining Loss : 0.010189402676953209 \tValidation Loss : 0.0072410672187805175\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 94%|█████████▍| 94/100 [14:01<00:54,  9.11s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 94 -\tTraining Loss : 0.01024690756532881 \tValidation Loss : 0.007242350339889526\n",
            "Epoch 95 -\tTraining Loss : 0.010235787419478098 \tValidation Loss : 0.007213407850265503\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 95%|█████████▌| 95/100 [14:11<00:46,  9.32s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 70.64222222222222 \tValidation Accuracy = 56.06 \tTest Accuracy Top1 = 56.99 \tTest Accuracy Top5 = 84.11\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 96%|█████████▌| 96/100 [14:20<00:36,  9.18s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 96 -\tTraining Loss : 0.010241212362713284 \tValidation Loss : 0.007236910247802734\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 97%|█████████▋| 97/100 [14:29<00:26,  8.98s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 97 -\tTraining Loss : 0.01032005659474267 \tValidation Loss : 0.007252318811416626\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 98%|█████████▊| 98/100 [14:38<00:18,  9.08s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 98 -\tTraining Loss : 0.010274395383728875 \tValidation Loss : 0.0072361031770706175\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 99%|█████████▉| 99/100 [14:47<00:09,  9.01s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 99 -\tTraining Loss : 0.01019684182273017 \tValidation Loss : 0.00719902195930481\n",
            "Epoch 100 -\tTraining Loss : 0.0100721794684728 \tValidation Loss : 0.007249300646781922\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 100/100 [14:57<00:00,  8.97s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 71.11333333333333 \tValidation Accuracy = 55.88 \tTest Accuracy Top1 = 56.69 \tTest Accuracy Top5 = 84.11\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "train_loader = DataLoader(train_set, batch_size=128, shuffle=True)\n",
        "validation_loader = DataLoader(validation_set, batch_size=256, shuffle=False)\n",
        "test_loader = DataLoader(test_set, batch_size=256, shuffle=False)\n",
        "\n",
        "optimizer = torch.optim.SGD\n",
        "scheduler = torch.optim.lr_scheduler.CosineAnnealingLR\n",
        "loss_fn = F.cross_entropy\n",
        "\n",
        "history1 = train(model1, optimizer, scheduler, loss_fn, train_loader, validation_loader, test_loader, learning_rate=0.01, num_epochs=100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tGy_U0tKsVAU",
        "outputId": "418bd8ed-92e1-46fc-ae4f-b9909a417364"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_loss(history1['train_loss'], history1['val_loss'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l7NdRFRRsWp7",
        "outputId": "72f213b1-b819-46d0-8f71-8726123886d7"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_acc(history1['train_acc'], history1['val_acc'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BqBqOO79_QBf",
        "outputId": "778e0092-5124-4d3f-b906-3f7f2b548d25"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_test(history1['test_acc1'], history1['test_acc5'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [],
      "source": [
        "with open('wide_resnet_history', 'wb') as f:\n",
        "  pickle.dump(history1, f)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [],
      "source": [
        "from AA_CNN import AttentionConv2d"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [],
      "source": [
        "class Wide_AAResNet(nn.Module):\n",
        "    def __init__(self, width = 4, dropout = 0.33, num_classes=100):\n",
        "        super().__init__()\n",
        "        self.Nh = 1\n",
        "        self.dv = 8\n",
        "\n",
        "        self.block0 = nn.Sequential(\n",
        "            nn.Conv2d(3, 16, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(16),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.block11 = nn.Sequential(\n",
        "            nn.Conv2d(16, 16*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            AttentionConv2d(\n",
        "                input_dim = 16*width,\n",
        "                output_dim = 16*width,\n",
        "                dk = 4*self.dv*width,\n",
        "                dv = self.dv*width,\n",
        "                num_heads = self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=16,\n",
        "                width=16,\n",
        "            ),\n",
        "        )\n",
        "        self.shortcut1 = nn.Conv2d(16, 16*width, kernel_size=1, stride=2)\n",
        "        self.block12 = nn.Sequential(\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            AttentionConv2d(\n",
        "                input_dim = 16*width,\n",
        "                output_dim = 16*width,\n",
        "                dk = 4*self.dv*width,\n",
        "                dv = self.dv*width,\n",
        "                num_heads = self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=16,\n",
        "                width=16,\n",
        "            ),\n",
        "        )\n",
        "\n",
        "\n",
        "        self.pre_block2 = nn.Sequential(\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "        self.block21 = nn.Sequential(\n",
        "            nn.Conv2d(16*width, 32*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            AttentionConv2d(\n",
        "                input_dim = 32*width,\n",
        "                output_dim = 32*width,\n",
        "                dk = 8*self.dv*width,\n",
        "                dv = 2*self.dv*width,\n",
        "                num_heads = 2*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=8,\n",
        "                width=8,\n",
        "            ),\n",
        "        )\n",
        "        self.shortcut2 = nn.Conv2d(16*width, 32*width, kernel_size=1, stride=2)\n",
        "        self.block22 = nn.Sequential(\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            AttentionConv2d(\n",
        "                input_dim = 32*width,\n",
        "                output_dim = 32*width,\n",
        "                dk = 8*self.dv*width,\n",
        "                dv = 2*self.dv*width,\n",
        "                num_heads = 2*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=8,\n",
        "                width=8,\n",
        "            ),\n",
        "        )\n",
        "\n",
        "        self.pre_block3 = nn.Sequential(\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "        self.block31 = nn.Sequential(\n",
        "            nn.Conv2d(32*width, 64*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            AttentionConv2d(\n",
        "                input_dim = 64*width,\n",
        "                output_dim = 64*width,\n",
        "                dk = 16*self.dv*width,\n",
        "                dv = 4*self.dv*width,\n",
        "                num_heads = 4*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=4,\n",
        "                width=4,\n",
        "            ),\n",
        "        )\n",
        "        self.shortcut3 = nn.Conv2d(32*width, 64*width, kernel_size=1, stride=2)\n",
        "        self.block32 = nn.Sequential(\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            AttentionConv2d(\n",
        "                input_dim = 64*width,\n",
        "                output_dim = 64*width,\n",
        "                dk = 16*self.dv*width,\n",
        "                dv = 4*self.dv*width,\n",
        "                num_heads = 4*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=4,\n",
        "                width=4,\n",
        "            ),\n",
        "        )\n",
        "\n",
        "        self.pool_block = nn.Sequential(\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.AvgPool2d(4, 4),\n",
        "        )\n",
        "\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Linear(64*width, 64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout1d(dropout/2),\n",
        "            nn.Linear(64*width, num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        # x.shape = B x 3 x 32 x 32\n",
        "\n",
        "        x = self.block0(x)\n",
        "        # x.shape = B x 16 x 32 x 32\n",
        "\n",
        "        x1 = self.block11(x)\n",
        "        x2 = self.shortcut1(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block12(x3)\n",
        "        x = x4 + x3\n",
        "        # x.shape = B x 16*width x 16 x 16\n",
        "\n",
        "        x = self.pre_block2(x)\n",
        "        x1 = self.block21(x)\n",
        "        x2 = self.shortcut2(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block22(x3)\n",
        "        x = x4 + x3\n",
        "        # x.shape = B x 32*width x 8 x 8\n",
        "\n",
        "        x = self.pre_block3(x)\n",
        "        x1 = self.block31(x)\n",
        "        x2 = self.shortcut3(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block32(x3)\n",
        "        x = x4 + x3\n",
        "        # x.shape = B x 64*width x 4 x 4\n",
        "\n",
        "        x = self.pool_block(x)\n",
        "        # x.shape = B x 64*width x 1 x 1\n",
        "\n",
        "        x = torch.flatten(x, start_dim=1)\n",
        "        # flatten all dimensions except batch (0th dim)\n",
        "        # x.shape = B x 64*width\n",
        "\n",
        "        x = self.fc(x)\n",
        "        # x.shape = B x num_classes\n",
        "\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 16, 32, 32]             448\n",
            "       BatchNorm2d-2           [-1, 16, 32, 32]              32\n",
            "              ReLU-3           [-1, 16, 32, 32]               0\n",
            "            Conv2d-4          [-1, 128, 16, 16]          18,560\n",
            "       BatchNorm2d-5          [-1, 128, 16, 16]             256\n",
            "              ReLU-6          [-1, 128, 16, 16]               0\n",
            "         Dropout2d-7          [-1, 128, 16, 16]               0\n",
            "            Conv2d-8           [-1, 64, 16, 16]          73,792\n",
            "            Conv2d-9          [-1, 576, 16, 16]          74,304\n",
            "          Softmax-10          [-1, 1, 256, 256]               0\n",
            "           Conv2d-11           [-1, 64, 16, 16]           4,160\n",
            "  AttentionConv2d-12          [-1, 128, 16, 16]               0\n",
            "           Conv2d-13          [-1, 128, 16, 16]           2,176\n",
            "      BatchNorm2d-14          [-1, 128, 16, 16]             256\n",
            "             ReLU-15          [-1, 128, 16, 16]               0\n",
            "           Conv2d-16          [-1, 128, 16, 16]         147,584\n",
            "      BatchNorm2d-17          [-1, 128, 16, 16]             256\n",
            "             ReLU-18          [-1, 128, 16, 16]               0\n",
            "        Dropout2d-19          [-1, 128, 16, 16]               0\n",
            "           Conv2d-20           [-1, 64, 16, 16]          73,792\n",
            "           Conv2d-21          [-1, 576, 16, 16]          74,304\n",
            "          Softmax-22          [-1, 1, 256, 256]               0\n",
            "           Conv2d-23           [-1, 64, 16, 16]           4,160\n",
            "  AttentionConv2d-24          [-1, 128, 16, 16]               0\n",
            "      BatchNorm2d-25          [-1, 128, 16, 16]             256\n",
            "             ReLU-26          [-1, 128, 16, 16]               0\n",
            "           Conv2d-27            [-1, 256, 8, 8]         295,168\n",
            "      BatchNorm2d-28            [-1, 256, 8, 8]             512\n",
            "             ReLU-29            [-1, 256, 8, 8]               0\n",
            "        Dropout2d-30            [-1, 256, 8, 8]               0\n",
            "           Conv2d-31            [-1, 128, 8, 8]         295,040\n",
            "           Conv2d-32           [-1, 1152, 8, 8]         296,064\n",
            "          Softmax-33            [-1, 2, 64, 64]               0\n",
            "           Conv2d-34            [-1, 128, 8, 8]          16,512\n",
            "  AttentionConv2d-35            [-1, 256, 8, 8]               0\n",
            "           Conv2d-36            [-1, 256, 8, 8]          33,024\n",
            "      BatchNorm2d-37            [-1, 256, 8, 8]             512\n",
            "             ReLU-38            [-1, 256, 8, 8]               0\n",
            "           Conv2d-39            [-1, 256, 8, 8]         590,080\n",
            "      BatchNorm2d-40            [-1, 256, 8, 8]             512\n",
            "             ReLU-41            [-1, 256, 8, 8]               0\n",
            "        Dropout2d-42            [-1, 256, 8, 8]               0\n",
            "           Conv2d-43            [-1, 128, 8, 8]         295,040\n",
            "           Conv2d-44           [-1, 1152, 8, 8]         296,064\n",
            "          Softmax-45            [-1, 2, 64, 64]               0\n",
            "           Conv2d-46            [-1, 128, 8, 8]          16,512\n",
            "  AttentionConv2d-47            [-1, 256, 8, 8]               0\n",
            "      BatchNorm2d-48            [-1, 256, 8, 8]             512\n",
            "             ReLU-49            [-1, 256, 8, 8]               0\n",
            "           Conv2d-50            [-1, 512, 4, 4]       1,180,160\n",
            "      BatchNorm2d-51            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-52            [-1, 512, 4, 4]               0\n",
            "        Dropout2d-53            [-1, 512, 4, 4]               0\n",
            "           Conv2d-54            [-1, 256, 4, 4]       1,179,904\n",
            "           Conv2d-55           [-1, 2304, 4, 4]       1,181,952\n",
            "          Softmax-56            [-1, 4, 16, 16]               0\n",
            "           Conv2d-57            [-1, 256, 4, 4]          65,792\n",
            "  AttentionConv2d-58            [-1, 512, 4, 4]               0\n",
            "           Conv2d-59            [-1, 512, 4, 4]         131,584\n",
            "      BatchNorm2d-60            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-61            [-1, 512, 4, 4]               0\n",
            "           Conv2d-62            [-1, 512, 4, 4]       2,359,808\n",
            "      BatchNorm2d-63            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-64            [-1, 512, 4, 4]               0\n",
            "        Dropout2d-65            [-1, 512, 4, 4]               0\n",
            "           Conv2d-66            [-1, 256, 4, 4]       1,179,904\n",
            "           Conv2d-67           [-1, 2304, 4, 4]       1,181,952\n",
            "          Softmax-68            [-1, 4, 16, 16]               0\n",
            "           Conv2d-69            [-1, 256, 4, 4]          65,792\n",
            "  AttentionConv2d-70            [-1, 512, 4, 4]               0\n",
            "      BatchNorm2d-71            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-72            [-1, 512, 4, 4]               0\n",
            "        AvgPool2d-73            [-1, 512, 1, 1]               0\n",
            "           Linear-74                  [-1, 512]         262,656\n",
            "             ReLU-75                  [-1, 512]               0\n",
            "        Dropout1d-76                  [-1, 512]               0\n",
            "           Linear-77                  [-1, 100]          51,300\n",
            "================================================================\n",
            "Total params: 11,454,788\n",
            "Trainable params: 11,454,788\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.01\n",
            "Forward/backward pass size (MB): 12.91\n",
            "Params size (MB): 43.70\n",
            "Estimated Total Size (MB): 56.62\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "model2 = Wide_AAResNet(width=8, dropout=0.5).to(device)\n",
        "summary(model2, (3, 32, 32))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  1%|          | 1/100 [00:13<23:03, 13.97s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1 -\tTraining Loss : 0.034108180734846325 \tValidation Loss : 0.015847626781463623\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  2%|▏         | 2/100 [00:27<22:20, 13.68s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 2 -\tTraining Loss : 0.031401908408270944 \tValidation Loss : 0.014980997514724731\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  3%|▎         | 3/100 [00:41<22:07, 13.69s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 3 -\tTraining Loss : 0.030083892885843913 \tValidation Loss : 0.014047088146209717\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  4%|▍         | 4/100 [00:55<22:01, 13.76s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 4 -\tTraining Loss : 0.028900349929597644 \tValidation Loss : 0.013341489791870118\n",
            "Epoch 5 -\tTraining Loss : 0.027655361721250746 \tValidation Loss : 0.0139934015750885\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  5%|▌         | 5/100 [01:09<22:19, 14.10s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 16.413333333333334 \tValidation Accuracy = 16.84 \tTest Accuracy Top1 = 16.87 \tTest Accuracy Top5 = 42.42\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  6%|▌         | 6/100 [01:23<21:56, 14.01s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 6 -\tTraining Loss : 0.026624416886435614 \tValidation Loss : 0.01195662579536438\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  7%|▋         | 7/100 [01:38<22:07, 14.27s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 7 -\tTraining Loss : 0.025679999579323664 \tValidation Loss : 0.011172435998916626\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  8%|▊         | 8/100 [01:52<21:46, 14.20s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 8 -\tTraining Loss : 0.024816157791349623 \tValidation Loss : 0.01089294376373291\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  9%|▉         | 9/100 [02:07<21:43, 14.33s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 9 -\tTraining Loss : 0.023986891825993856 \tValidation Loss : 0.010083185052871703\n",
            "Epoch 10 -\tTraining Loss : 0.02332152467303806 \tValidation Loss : 0.009956074523925782\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 10%|█         | 10/100 [02:22<21:50, 14.56s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 26.717777777777776 \tValidation Accuracy = 35.94 \tTest Accuracy Top1 = 37.02 \tTest Accuracy Top5 = 68.36\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█         | 11/100 [02:36<21:21, 14.40s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 11 -\tTraining Loss : 0.022738744597964818 \tValidation Loss : 0.009709013938903808\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 12%|█▏        | 12/100 [02:50<21:04, 14.37s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 12 -\tTraining Loss : 0.02227031223509047 \tValidation Loss : 0.009398713445663452\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 13%|█▎        | 13/100 [03:04<20:41, 14.27s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 13 -\tTraining Loss : 0.021683118375142415 \tValidation Loss : 0.00927024073600769\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 14%|█▍        | 14/100 [03:19<20:37, 14.39s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 14 -\tTraining Loss : 0.021221133136749268 \tValidation Loss : 0.009952132272720337\n",
            "Epoch 15 -\tTraining Loss : 0.020812976455688477 \tValidation Loss : 0.008790248489379883\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 15%|█▌        | 15/100 [03:34<20:39, 14.59s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 34.14 \tValidation Accuracy = 43.5 \tTest Accuracy Top1 = 43.34 \tTest Accuracy Top5 = 74.8\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 16%|█▌        | 16/100 [03:47<20:02, 14.31s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 16 -\tTraining Loss : 0.020449536493089462 \tValidation Loss : 0.008779012489318847\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 17%|█▋        | 17/100 [04:02<20:07, 14.54s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 17 -\tTraining Loss : 0.019864837826622857 \tValidation Loss : 0.009429308414459228\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 18%|█▊        | 18/100 [04:16<19:37, 14.36s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 18 -\tTraining Loss : 0.01948650804890527 \tValidation Loss : 0.008339177346229553\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 19%|█▉        | 19/100 [04:31<19:22, 14.36s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 19 -\tTraining Loss : 0.01926478579574161 \tValidation Loss : 0.00818770821094513\n",
            "Epoch 20 -\tTraining Loss : 0.01881427528328366 \tValidation Loss : 0.008323945331573487\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 20%|██        | 20/100 [04:47<19:46, 14.84s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 39.8 \tValidation Accuracy = 44.28 \tTest Accuracy Top1 = 45.9 \tTest Accuracy Top5 = 76.17\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 21%|██        | 21/100 [05:02<19:38, 14.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 21 -\tTraining Loss : 0.018460272407531737 \tValidation Loss : 0.008076069188117981\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 22/100 [05:16<19:14, 14.80s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 22 -\tTraining Loss : 0.018074793571896022 \tValidation Loss : 0.007839928078651429\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 23%|██▎       | 23/100 [05:30<18:40, 14.56s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 23 -\tTraining Loss : 0.01767619868649377 \tValidation Loss : 0.007814186096191406\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 24%|██▍       | 24/100 [05:45<18:22, 14.51s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 24 -\tTraining Loss : 0.017480930701891582 \tValidation Loss : 0.007708675956726074\n",
            "Epoch 25 -\tTraining Loss : 0.0171935828977161 \tValidation Loss : 0.007593762040138245\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 25%|██▌       | 25/100 [06:00<18:17, 14.63s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 45.18888888888889 \tValidation Accuracy = 49.28 \tTest Accuracy Top1 = 49.48 \tTest Accuracy Top5 = 79.17\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 26%|██▌       | 26/100 [06:14<18:00, 14.61s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 26 -\tTraining Loss : 0.0169695219039917 \tValidation Loss : 0.0075400225400924685\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 27%|██▋       | 27/100 [06:29<17:40, 14.53s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 27 -\tTraining Loss : 0.016579805411232842 \tValidation Loss : 0.007579384064674378\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 28%|██▊       | 28/100 [06:43<17:20, 14.45s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 28 -\tTraining Loss : 0.016210590963893465 \tValidation Loss : 0.007601908469200135\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 29%|██▉       | 29/100 [06:56<16:44, 14.15s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 29 -\tTraining Loss : 0.01588799062040117 \tValidation Loss : 0.007591539263725281\n",
            "Epoch 30 -\tTraining Loss : 0.01586730780866411 \tValidation Loss : 0.007957889533042908\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 30%|███       | 30/100 [07:11<16:33, 14.19s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 49.24444444444445 \tValidation Accuracy = 47.18 \tTest Accuracy Top1 = 48.35 \tTest Accuracy Top5 = 77.73\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 31%|███       | 31/100 [07:24<16:11, 14.08s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 31 -\tTraining Loss : 0.015463129851553176 \tValidation Loss : 0.0074992572784423825\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 32%|███▏      | 32/100 [07:38<15:45, 13.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 32 -\tTraining Loss : 0.015171109549204509 \tValidation Loss : 0.0074800394773483275\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 33%|███▎      | 33/100 [07:52<15:30, 13.89s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 33 -\tTraining Loss : 0.014869322056240506 \tValidation Loss : 0.00748067889213562\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▍      | 34/100 [08:05<15:10, 13.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 34 -\tTraining Loss : 0.01461247598859999 \tValidation Loss : 0.007722057461738587\n",
            "Epoch 35 -\tTraining Loss : 0.014366670208507114 \tValidation Loss : 0.0076974957942962646\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 35%|███▌      | 35/100 [08:20<15:10, 14.01s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 54.28666666666667 \tValidation Accuracy = 49.9 \tTest Accuracy Top1 = 50.58 \tTest Accuracy Top5 = 79.32\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 36%|███▌      | 36/100 [08:34<14:55, 13.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 36 -\tTraining Loss : 0.014156796929571364 \tValidation Loss : 0.0075610173463821415\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 37%|███▋      | 37/100 [08:48<14:43, 14.02s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 37 -\tTraining Loss : 0.013962828572591146 \tValidation Loss : 0.007443037295341491\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 38%|███▊      | 38/100 [09:01<14:13, 13.76s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 38 -\tTraining Loss : 0.013666616643799676 \tValidation Loss : 0.007656870317459106\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 39%|███▉      | 39/100 [09:15<14:06, 13.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 39 -\tTraining Loss : 0.013361038687494066 \tValidation Loss : 0.007527625560760498\n",
            "Epoch 40 -\tTraining Loss : 0.013161514944500394 \tValidation Loss : 0.007601879334449768\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 40%|████      | 40/100 [09:29<13:58, 13.97s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 58.43555555555555 \tValidation Accuracy = 51.52 \tTest Accuracy Top1 = 51.33 \tTest Accuracy Top5 = 80.43\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 41%|████      | 41/100 [09:43<13:35, 13.83s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 41 -\tTraining Loss : 0.012987050326665242 \tValidation Loss : 0.007741388177871704\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 42%|████▏     | 42/100 [09:57<13:21, 13.82s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 42 -\tTraining Loss : 0.012628794556193881 \tValidation Loss : 0.007740733122825623\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 43%|████▎     | 43/100 [10:11<13:10, 13.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 43 -\tTraining Loss : 0.012559087549315558 \tValidation Loss : 0.007817042469978332\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 44%|████▍     | 44/100 [10:24<12:49, 13.75s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 44 -\tTraining Loss : 0.012447467684745788 \tValidation Loss : 0.007773211312294006\n",
            "Epoch 45 -\tTraining Loss : 0.012193237789471944 \tValidation Loss : 0.007724991369247437\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▌     | 45/100 [10:38<12:46, 13.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 62.12444444444444 \tValidation Accuracy = 51.46 \tTest Accuracy Top1 = 51.87 \tTest Accuracy Top5 = 80.69\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 46%|████▌     | 46/100 [10:52<12:31, 13.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 46 -\tTraining Loss : 0.012031036676300897 \tValidation Loss : 0.007856051230430603\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 47%|████▋     | 47/100 [11:06<12:09, 13.76s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 47 -\tTraining Loss : 0.011811799857351516 \tValidation Loss : 0.007800031566619873\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 48%|████▊     | 48/100 [11:19<11:50, 13.67s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 48 -\tTraining Loss : 0.011742755447493659 \tValidation Loss : 0.00801714985370636\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 49%|████▉     | 49/100 [11:33<11:33, 13.60s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 49 -\tTraining Loss : 0.011442907753255632 \tValidation Loss : 0.007936178421974182\n",
            "Epoch 50 -\tTraining Loss : 0.011495068430900575 \tValidation Loss : 0.007903556847572327\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 50%|█████     | 50/100 [11:47<11:34, 13.89s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 65.16888888888889 \tValidation Accuracy = 51.44 \tTest Accuracy Top1 = 52.13 \tTest Accuracy Top5 = 80.73\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 51%|█████     | 51/100 [12:01<11:25, 13.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 51 -\tTraining Loss : 0.011241686899132198 \tValidation Loss : 0.007976390552520751\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 52%|█████▏    | 52/100 [12:15<11:07, 13.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 52 -\tTraining Loss : 0.011028847059938642 \tValidation Loss : 0.007995386004447937\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 53%|█████▎    | 53/100 [12:29<10:50, 13.85s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 53 -\tTraining Loss : 0.011101162118381924 \tValidation Loss : 0.008037371945381164\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 54%|█████▍    | 54/100 [12:43<10:35, 13.81s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 54 -\tTraining Loss : 0.010843881838851505 \tValidation Loss : 0.00809276762008667\n",
            "Epoch 55 -\tTraining Loss : 0.010851486800776588 \tValidation Loss : 0.008290181970596314\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 55%|█████▌    | 55/100 [12:57<10:32, 14.06s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 67.74444444444444 \tValidation Accuracy = 51.6 \tTest Accuracy Top1 = 51.89 \tTest Accuracy Top5 = 80.39\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 56/100 [13:11<10:10, 13.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 56 -\tTraining Loss : 0.010680731835630205 \tValidation Loss : 0.008241039490699768\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 57%|█████▋    | 57/100 [13:25<09:56, 13.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 57 -\tTraining Loss : 0.010616326134734684 \tValidation Loss : 0.008381974339485168\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 58%|█████▊    | 58/100 [13:38<09:38, 13.77s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 58 -\tTraining Loss : 0.010470815212196774 \tValidation Loss : 0.008479711437225342\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 59%|█████▉    | 59/100 [13:52<09:22, 13.73s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 59 -\tTraining Loss : 0.01041636378897561 \tValidation Loss : 0.008333612847328186\n",
            "Epoch 60 -\tTraining Loss : 0.010403164278136359 \tValidation Loss : 0.008379889965057372\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 60%|██████    | 60/100 [14:06<09:20, 14.02s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 69.57111111111111 \tValidation Accuracy = 52.16 \tTest Accuracy Top1 = 52.55 \tTest Accuracy Top5 = 80.3\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 61%|██████    | 61/100 [14:20<09:07, 14.03s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 61 -\tTraining Loss : 0.010284445350699955 \tValidation Loss : 0.008422810220718384\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 62%|██████▏   | 62/100 [14:34<08:47, 13.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 62 -\tTraining Loss : 0.010248174267345004 \tValidation Loss : 0.00846377375125885\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 63%|██████▎   | 63/100 [14:48<08:33, 13.89s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 63 -\tTraining Loss : 0.010188481059339312 \tValidation Loss : 0.008576804184913635\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 64%|██████▍   | 64/100 [15:02<08:18, 13.86s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 64 -\tTraining Loss : 0.010089371289147272 \tValidation Loss : 0.008472811770439148\n",
            "Epoch 65 -\tTraining Loss : 0.010135168335172865 \tValidation Loss : 0.008589418315887451\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 65%|██████▌   | 65/100 [15:16<08:13, 14.11s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 70.71777777777778 \tValidation Accuracy = 52.04 \tTest Accuracy Top1 = 52.22 \tTest Accuracy Top5 = 80.39\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 66%|██████▌   | 66/100 [15:31<08:06, 14.30s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 66 -\tTraining Loss : 0.010001692700386047 \tValidation Loss : 0.008574041533470154\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 67%|██████▋   | 67/100 [15:45<07:52, 14.33s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 67 -\tTraining Loss : 0.009867070423232184 \tValidation Loss : 0.008607300448417664\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 68%|██████▊   | 68/100 [16:00<07:38, 14.32s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 68 -\tTraining Loss : 0.009987525196870168 \tValidation Loss : 0.008597244358062745\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 69%|██████▉   | 69/100 [16:14<07:22, 14.26s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 69 -\tTraining Loss : 0.009947110769483777 \tValidation Loss : 0.00864841809272766\n",
            "Epoch 70 -\tTraining Loss : 0.009695247500472598 \tValidation Loss : 0.008680561494827271\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 70%|███████   | 70/100 [16:29<07:19, 14.66s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 72.46 \tValidation Accuracy = 52.36 \tTest Accuracy Top1 = 52.98 \tTest Accuracy Top5 = 80.66\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 71%|███████   | 71/100 [16:43<06:57, 14.41s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 71 -\tTraining Loss : 0.009766991498735215 \tValidation Loss : 0.008630130004882813\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 72%|███████▏  | 72/100 [16:57<06:35, 14.14s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 72 -\tTraining Loss : 0.009620872778362698 \tValidation Loss : 0.008731506371498108\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 73%|███████▎  | 73/100 [17:10<06:13, 13.83s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 73 -\tTraining Loss : 0.009764664672480688 \tValidation Loss : 0.008695402097702027\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 74%|███████▍  | 74/100 [17:23<05:57, 13.73s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 74 -\tTraining Loss : 0.009661792831950717 \tValidation Loss : 0.00871374945640564\n",
            "Epoch 75 -\tTraining Loss : 0.009835910240809122 \tValidation Loss : 0.0087606130361557\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 75%|███████▌  | 75/100 [17:38<05:45, 13.84s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 72.30444444444444 \tValidation Accuracy = 52.64 \tTest Accuracy Top1 = 53.19 \tTest Accuracy Top5 = 80.77\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 76%|███████▌  | 76/100 [17:51<05:29, 13.73s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 76 -\tTraining Loss : 0.009717377648088667 \tValidation Loss : 0.008765156579017639\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 77%|███████▋  | 77/100 [18:04<05:12, 13.59s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 77 -\tTraining Loss : 0.009689359642399682 \tValidation Loss : 0.008728741145133972\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 78%|███████▊  | 78/100 [18:18<04:56, 13.50s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 78 -\tTraining Loss : 0.00962365851799647 \tValidation Loss : 0.008754836344718932\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 79%|███████▉  | 79/100 [18:31<04:43, 13.48s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 79 -\tTraining Loss : 0.009549296021461488 \tValidation Loss : 0.00872389760017395\n",
            "Epoch 80 -\tTraining Loss : 0.009587915050983428 \tValidation Loss : 0.00872258026599884\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 80%|████████  | 80/100 [18:46<04:35, 13.80s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 73.11111111111111 \tValidation Accuracy = 52.86 \tTest Accuracy Top1 = 53.12 \tTest Accuracy Top5 = 80.98\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 81%|████████  | 81/100 [18:59<04:19, 13.65s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 81 -\tTraining Loss : 0.009476376836829715 \tValidation Loss : 0.008736489820480347\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 82%|████████▏ | 82/100 [19:12<04:05, 13.66s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 82 -\tTraining Loss : 0.009545015988085005 \tValidation Loss : 0.008829662799835205\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 83%|████████▎ | 83/100 [19:26<03:51, 13.65s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 83 -\tTraining Loss : 0.009542840387423833 \tValidation Loss : 0.008797954201698304\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 84%|████████▍ | 84/100 [19:39<03:36, 13.56s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 84 -\tTraining Loss : 0.009529641493161519 \tValidation Loss : 0.00878102879524231\n",
            "Epoch 85 -\tTraining Loss : 0.009557194284598032 \tValidation Loss : 0.008806562733650207\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 85%|████████▌ | 85/100 [19:54<03:26, 13.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 73.39111111111112 \tValidation Accuracy = 52.82 \tTest Accuracy Top1 = 53.5 \tTest Accuracy Top5 = 80.89\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 86%|████████▌ | 86/100 [20:08<03:12, 13.77s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 86 -\tTraining Loss : 0.00951013737519582 \tValidation Loss : 0.008807775115966797\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 87%|████████▋ | 87/100 [20:22<03:03, 14.13s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 87 -\tTraining Loss : 0.009486292695999146 \tValidation Loss : 0.008812262964248658\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 88%|████████▊ | 88/100 [20:37<02:51, 14.26s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 88 -\tTraining Loss : 0.009550787801212735 \tValidation Loss : 0.008799412727355956\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 89%|████████▉ | 89/100 [20:51<02:36, 14.24s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 89 -\tTraining Loss : 0.009483799306551615 \tValidation Loss : 0.008836271572113037\n",
            "Epoch 90 -\tTraining Loss : 0.009565667480892605 \tValidation Loss : 0.008809542512893677\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 90%|█████████ | 90/100 [21:06<02:23, 14.36s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 73.21555555555555 \tValidation Accuracy = 52.64 \tTest Accuracy Top1 = 53.53 \tTest Accuracy Top5 = 81.05\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 91%|█████████ | 91/100 [21:20<02:07, 14.22s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 91 -\tTraining Loss : 0.009511182255215115 \tValidation Loss : 0.008812626194953918\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 92%|█████████▏| 92/100 [21:34<01:52, 14.11s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 92 -\tTraining Loss : 0.00932920692761739 \tValidation Loss : 0.008806593418121338\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 93%|█████████▎| 93/100 [21:48<01:38, 14.12s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 93 -\tTraining Loss : 0.009411650427182516 \tValidation Loss : 0.008865944361686707\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 94%|█████████▍| 94/100 [22:02<01:24, 14.13s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 94 -\tTraining Loss : 0.009478428665796916 \tValidation Loss : 0.008823520803451538\n",
            "Epoch 95 -\tTraining Loss : 0.009642767918109894 \tValidation Loss : 0.008805295252799987\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 95%|█████████▌| 95/100 [22:17<01:12, 14.42s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 73.12444444444445 \tValidation Accuracy = 52.8 \tTest Accuracy Top1 = 53.47 \tTest Accuracy Top5 = 81.16\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 96%|█████████▌| 96/100 [22:31<00:56, 14.24s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 96 -\tTraining Loss : 0.009488071217801836 \tValidation Loss : 0.008804145288467407\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 97%|█████████▋| 97/100 [22:44<00:42, 14.01s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 97 -\tTraining Loss : 0.009571602639887067 \tValidation Loss : 0.008825842475891113\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 98%|█████████▊| 98/100 [22:58<00:27, 13.86s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 98 -\tTraining Loss : 0.00947848718431261 \tValidation Loss : 0.0088338481426239\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 99%|█████████▉| 99/100 [23:11<00:13, 13.70s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 99 -\tTraining Loss : 0.009414026125272115 \tValidation Loss : 0.008847648072242737\n",
            "Epoch 100 -\tTraining Loss : 0.009396745216846466 \tValidation Loss : 0.008792712092399598\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 100/100 [23:26<00:00, 14.06s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 73.74888888888889 \tValidation Accuracy = 52.98 \tTest Accuracy Top1 = 53.74 \tTest Accuracy Top5 = 81.09\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "train_loader = DataLoader(train_set, batch_size=128, shuffle=True)\n",
        "validation_loader = DataLoader(validation_set, batch_size=256, shuffle=False)\n",
        "test_loader = DataLoader(test_set, batch_size=256, shuffle=False)\n",
        "\n",
        "optimizer = torch.optim.SGD\n",
        "scheduler = torch.optim.lr_scheduler.CosineAnnealingLR\n",
        "loss_fn = F.cross_entropy\n",
        "\n",
        "history2 = train(model2, optimizer, scheduler, loss_fn, train_loader, validation_loader, test_loader, learning_rate=0.01, num_epochs=100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_loss(history2['train_loss'], history2['val_loss'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_acc(history2['train_acc'], history2['val_acc'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_test(history2['test_acc1'], history2['test_acc5'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [],
      "source": [
        "with open('wide_aaresnet_history', 'wb') as f:\n",
        "  pickle.dump(history2, f)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [],
      "source": [
        "from AA_CNN import LinearAttentionConv2d"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [],
      "source": [
        "class Wide_LAAResNet(nn.Module):\n",
        "    def __init__(self, width = 4, dropout = 0.33, num_classes=100):\n",
        "        super().__init__()\n",
        "        self.Nh = 1\n",
        "        self.dv = 8\n",
        "\n",
        "        self.block0 = nn.Sequential(\n",
        "            nn.Conv2d(3, 16, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(16),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "\n",
        "        self.block11 = nn.Sequential(\n",
        "            nn.Conv2d(16, 16*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            LinearAttentionConv2d(\n",
        "                input_dim = 16*width,\n",
        "                output_dim = 16*width,\n",
        "                dk = 4*self.dv*width,\n",
        "                dv = self.dv*width,\n",
        "                num_heads = self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=16,\n",
        "                width=16,\n",
        "            ),\n",
        "        )\n",
        "        self.shortcut1 = nn.Conv2d(16, 16*width, kernel_size=1, stride=2)\n",
        "        self.block12 = nn.Sequential(\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(16*width, 16*width, kernel_size=3, padding=1, stride=1),\n",
        "            LinearAttentionConv2d(\n",
        "                input_dim = 16*width,\n",
        "                output_dim = 16*width,\n",
        "                dk = 4*self.dv*width,\n",
        "                dv = self.dv*width,\n",
        "                num_heads = self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=16,\n",
        "                width=16,\n",
        "            ),\n",
        "        )\n",
        "\n",
        "\n",
        "        self.pre_block2 = nn.Sequential(\n",
        "            nn.BatchNorm2d(16*width),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "        self.block21 = nn.Sequential(\n",
        "            nn.Conv2d(16*width, 32*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            LinearAttentionConv2d(\n",
        "                input_dim = 32*width,\n",
        "                output_dim = 32*width,\n",
        "                dk = 8*self.dv*width,\n",
        "                dv = 2*self.dv*width,\n",
        "                num_heads = 2*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=8,\n",
        "                width=8,\n",
        "            ),\n",
        "        )\n",
        "        self.shortcut2 = nn.Conv2d(16*width, 32*width, kernel_size=1, stride=2)\n",
        "        self.block22 = nn.Sequential(\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(32*width, 32*width, kernel_size=3, padding=1, stride=1),\n",
        "            LinearAttentionConv2d(\n",
        "                input_dim = 32*width,\n",
        "                output_dim = 32*width,\n",
        "                dk = 8*self.dv*width,\n",
        "                dv = 2*self.dv*width,\n",
        "                num_heads = 2*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=8,\n",
        "                width=8,\n",
        "            ),\n",
        "        )\n",
        "\n",
        "        self.pre_block3 = nn.Sequential(\n",
        "            nn.BatchNorm2d(32*width),\n",
        "            nn.ReLU(),\n",
        "        )\n",
        "        self.block31 = nn.Sequential(\n",
        "            nn.Conv2d(32*width, 64*width, kernel_size=3, padding=1, stride=2),\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            LinearAttentionConv2d(\n",
        "                input_dim = 64*width,\n",
        "                output_dim = 64*width,\n",
        "                dk = 16*self.dv*width,\n",
        "                dv = 4*self.dv*width,\n",
        "                num_heads = 4*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=4,\n",
        "                width=4,\n",
        "            ),\n",
        "        )\n",
        "        self.shortcut3 = nn.Conv2d(32*width, 64*width, kernel_size=1, stride=2)\n",
        "        self.block32 = nn.Sequential(\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout2d(dropout),\n",
        "            # nn.Conv2d(64*width, 64*width, kernel_size=3, padding=1, stride=1),\n",
        "            LinearAttentionConv2d(\n",
        "                input_dim = 64*width,\n",
        "                output_dim = 64*width,\n",
        "                dk = 16*self.dv*width,\n",
        "                dv = 4*self.dv*width,\n",
        "                num_heads = 4*self.Nh,\n",
        "                kernel_size = 3,\n",
        "                padding = 1,\n",
        "                height=4,\n",
        "                width=4,\n",
        "            ),\n",
        "        )\n",
        "\n",
        "        self.pool_block = nn.Sequential(\n",
        "            nn.BatchNorm2d(64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.AvgPool2d(4, 4),\n",
        "        )\n",
        "\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Linear(64*width, 64*width),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout1d(dropout/2),\n",
        "            nn.Linear(64*width, num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        # x.shape = B x 3 x 32 x 32\n",
        "\n",
        "        x = self.block0(x)\n",
        "        # x.shape = B x 16 x 32 x 32\n",
        "\n",
        "        x1 = self.block11(x)\n",
        "        x2 = self.shortcut1(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block12(x3)\n",
        "        x = x4 + x3\n",
        "        # x.shape = B x 16*width x 16 x 16\n",
        "\n",
        "        x = self.pre_block2(x)\n",
        "        x1 = self.block21(x)\n",
        "        x2 = self.shortcut2(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block22(x3)\n",
        "        x = x4 + x3\n",
        "        # x.shape = B x 32*width x 8 x 8\n",
        "\n",
        "        x = self.pre_block3(x)\n",
        "        x1 = self.block31(x)\n",
        "        x2 = self.shortcut3(x)\n",
        "        x3 = x1 + x2\n",
        "        x4 = self.block32(x3)\n",
        "        x = x4 + x3\n",
        "        # x.shape = B x 64*width x 4 x 4\n",
        "\n",
        "        x = self.pool_block(x)\n",
        "        # x.shape = B x 64*width x 1 x 1\n",
        "\n",
        "        x = torch.flatten(x, start_dim=1)\n",
        "        # flatten all dimensions except batch (0th dim)\n",
        "        # x.shape = B x 64*width\n",
        "\n",
        "        x = self.fc(x)\n",
        "        # x.shape = B x num_classes\n",
        "\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 16, 32, 32]             448\n",
            "       BatchNorm2d-2           [-1, 16, 32, 32]              32\n",
            "              ReLU-3           [-1, 16, 32, 32]               0\n",
            "            Conv2d-4          [-1, 128, 16, 16]          18,560\n",
            "       BatchNorm2d-5          [-1, 128, 16, 16]             256\n",
            "              ReLU-6          [-1, 128, 16, 16]               0\n",
            "         Dropout2d-7          [-1, 128, 16, 16]               0\n",
            "            Conv2d-8           [-1, 64, 16, 16]          73,792\n",
            "            Conv2d-9          [-1, 576, 16, 16]          74,304\n",
            "          Softmax-10          [-1, 1, 256, 256]               0\n",
            "          Softmax-11          [-1, 1, 256, 256]               0\n",
            "           Conv2d-12           [-1, 64, 16, 16]           4,160\n",
            "LinearAttentionConv2d-13          [-1, 128, 16, 16]               0\n",
            "           Conv2d-14          [-1, 128, 16, 16]           2,176\n",
            "      BatchNorm2d-15          [-1, 128, 16, 16]             256\n",
            "             ReLU-16          [-1, 128, 16, 16]               0\n",
            "           Conv2d-17          [-1, 128, 16, 16]         147,584\n",
            "      BatchNorm2d-18          [-1, 128, 16, 16]             256\n",
            "             ReLU-19          [-1, 128, 16, 16]               0\n",
            "        Dropout2d-20          [-1, 128, 16, 16]               0\n",
            "           Conv2d-21           [-1, 64, 16, 16]          73,792\n",
            "           Conv2d-22          [-1, 576, 16, 16]          74,304\n",
            "          Softmax-23          [-1, 1, 256, 256]               0\n",
            "          Softmax-24          [-1, 1, 256, 256]               0\n",
            "           Conv2d-25           [-1, 64, 16, 16]           4,160\n",
            "LinearAttentionConv2d-26          [-1, 128, 16, 16]               0\n",
            "      BatchNorm2d-27          [-1, 128, 16, 16]             256\n",
            "             ReLU-28          [-1, 128, 16, 16]               0\n",
            "           Conv2d-29            [-1, 256, 8, 8]         295,168\n",
            "      BatchNorm2d-30            [-1, 256, 8, 8]             512\n",
            "             ReLU-31            [-1, 256, 8, 8]               0\n",
            "        Dropout2d-32            [-1, 256, 8, 8]               0\n",
            "           Conv2d-33            [-1, 128, 8, 8]         295,040\n",
            "           Conv2d-34           [-1, 1152, 8, 8]         296,064\n",
            "          Softmax-35           [-1, 2, 256, 64]               0\n",
            "          Softmax-36           [-1, 2, 256, 64]               0\n",
            "           Conv2d-37            [-1, 128, 8, 8]          16,512\n",
            "LinearAttentionConv2d-38            [-1, 256, 8, 8]               0\n",
            "           Conv2d-39            [-1, 256, 8, 8]          33,024\n",
            "      BatchNorm2d-40            [-1, 256, 8, 8]             512\n",
            "             ReLU-41            [-1, 256, 8, 8]               0\n",
            "           Conv2d-42            [-1, 256, 8, 8]         590,080\n",
            "      BatchNorm2d-43            [-1, 256, 8, 8]             512\n",
            "             ReLU-44            [-1, 256, 8, 8]               0\n",
            "        Dropout2d-45            [-1, 256, 8, 8]               0\n",
            "           Conv2d-46            [-1, 128, 8, 8]         295,040\n",
            "           Conv2d-47           [-1, 1152, 8, 8]         296,064\n",
            "          Softmax-48           [-1, 2, 256, 64]               0\n",
            "          Softmax-49           [-1, 2, 256, 64]               0\n",
            "           Conv2d-50            [-1, 128, 8, 8]          16,512\n",
            "LinearAttentionConv2d-51            [-1, 256, 8, 8]               0\n",
            "      BatchNorm2d-52            [-1, 256, 8, 8]             512\n",
            "             ReLU-53            [-1, 256, 8, 8]               0\n",
            "           Conv2d-54            [-1, 512, 4, 4]       1,180,160\n",
            "      BatchNorm2d-55            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-56            [-1, 512, 4, 4]               0\n",
            "        Dropout2d-57            [-1, 512, 4, 4]               0\n",
            "           Conv2d-58            [-1, 256, 4, 4]       1,179,904\n",
            "           Conv2d-59           [-1, 2304, 4, 4]       1,181,952\n",
            "          Softmax-60           [-1, 4, 256, 16]               0\n",
            "          Softmax-61           [-1, 4, 256, 16]               0\n",
            "           Conv2d-62            [-1, 256, 4, 4]          65,792\n",
            "LinearAttentionConv2d-63            [-1, 512, 4, 4]               0\n",
            "           Conv2d-64            [-1, 512, 4, 4]         131,584\n",
            "      BatchNorm2d-65            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-66            [-1, 512, 4, 4]               0\n",
            "           Conv2d-67            [-1, 512, 4, 4]       2,359,808\n",
            "      BatchNorm2d-68            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-69            [-1, 512, 4, 4]               0\n",
            "        Dropout2d-70            [-1, 512, 4, 4]               0\n",
            "           Conv2d-71            [-1, 256, 4, 4]       1,179,904\n",
            "           Conv2d-72           [-1, 2304, 4, 4]       1,181,952\n",
            "          Softmax-73           [-1, 4, 256, 16]               0\n",
            "          Softmax-74           [-1, 4, 256, 16]               0\n",
            "           Conv2d-75            [-1, 256, 4, 4]          65,792\n",
            "LinearAttentionConv2d-76            [-1, 512, 4, 4]               0\n",
            "      BatchNorm2d-77            [-1, 512, 4, 4]           1,024\n",
            "             ReLU-78            [-1, 512, 4, 4]               0\n",
            "        AvgPool2d-79            [-1, 512, 1, 1]               0\n",
            "           Linear-80                  [-1, 512]         262,656\n",
            "             ReLU-81                  [-1, 512]               0\n",
            "        Dropout1d-82                  [-1, 512]               0\n",
            "           Linear-83                  [-1, 100]          51,300\n",
            "================================================================\n",
            "Total params: 11,454,788\n",
            "Trainable params: 11,454,788\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.01\n",
            "Forward/backward pass size (MB): 15.27\n",
            "Params size (MB): 43.70\n",
            "Estimated Total Size (MB): 58.97\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "model3 = Wide_LAAResNet(width=8, dropout=0.5).to(device)\n",
        "summary(model3, (3, 32, 32))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  0%|          | 0/100 [00:00<?, ?it/s]"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  1%|          | 1/100 [00:15<24:49, 15.05s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1 -\tTraining Loss : 0.03411663406689962 \tValidation Loss : 0.016176101922988892\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  2%|▏         | 2/100 [00:30<24:35, 15.06s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 2 -\tTraining Loss : 0.031442937850952146 \tValidation Loss : 0.014770871734619141\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  3%|▎         | 3/100 [00:45<24:19, 15.05s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 3 -\tTraining Loss : 0.03029080630938212 \tValidation Loss : 0.014138331222534179\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  4%|▍         | 4/100 [00:59<23:52, 14.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 4 -\tTraining Loss : 0.029244206767612035 \tValidation Loss : 0.013334618091583253\n",
            "Epoch 5 -\tTraining Loss : 0.028167702701356677 \tValidation Loss : 0.01349499101638794\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  5%|▌         | 5/100 [01:16<24:25, 15.42s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 14.931111111111111 \tValidation Accuracy = 19.52 \tTest Accuracy Top1 = 18.91 \tTest Accuracy Top5 = 46.05\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  6%|▌         | 6/100 [01:30<23:43, 15.15s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 6 -\tTraining Loss : 0.027171959654490152 \tValidation Loss : 0.012267692708969116\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  7%|▋         | 7/100 [01:45<23:26, 15.13s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 7 -\tTraining Loss : 0.02644501707288954 \tValidation Loss : 0.01181579875946045\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  8%|▊         | 8/100 [02:00<23:08, 15.09s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 8 -\tTraining Loss : 0.025846911409166125 \tValidation Loss : 0.01130352349281311\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  9%|▉         | 9/100 [02:15<22:38, 14.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 9 -\tTraining Loss : 0.02528986694018046 \tValidation Loss : 0.011090347290039063\n",
            "Epoch 10 -\tTraining Loss : 0.024735842678281997 \tValidation Loss : 0.010683864068984986\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 10%|█         | 10/100 [02:31<22:43, 15.15s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 23.351111111111113 \tValidation Accuracy = 32.96 \tTest Accuracy Top1 = 33.83 \tTest Accuracy Top5 = 64.87\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█         | 11/100 [02:45<22:14, 14.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 11 -\tTraining Loss : 0.024222865221235488 \tValidation Loss : 0.010487907934188842\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 12%|█▏        | 12/100 [03:00<21:47, 14.85s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 12 -\tTraining Loss : 0.02377827360365126 \tValidation Loss : 0.01051461181640625\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 13%|█▎        | 13/100 [03:14<21:23, 14.75s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 13 -\tTraining Loss : 0.023188985538482667 \tValidation Loss : 0.010864033508300782\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 14%|█▍        | 14/100 [03:29<21:07, 14.74s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 14 -\tTraining Loss : 0.02302831482357449 \tValidation Loss : 0.010003072261810303\n",
            "Epoch 15 -\tTraining Loss : 0.02248828524483575 \tValidation Loss : 0.009763191509246826\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 15%|█▌        | 15/100 [03:44<21:08, 14.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 29.344444444444445 \tValidation Accuracy = 37.54 \tTest Accuracy Top1 = 38.2 \tTest Accuracy Top5 = 70.39\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 16%|█▌        | 16/100 [03:59<20:40, 14.76s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 16 -\tTraining Loss : 0.022126048474841647 \tValidation Loss : 0.009279779386520385\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 17%|█▋        | 17/100 [04:13<20:23, 14.74s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 17 -\tTraining Loss : 0.02167430796093411 \tValidation Loss : 0.009777991580963135\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 18%|█▊        | 18/100 [04:28<20:04, 14.69s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 18 -\tTraining Loss : 0.021332396947013006 \tValidation Loss : 0.009188783740997315\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 19%|█▉        | 19/100 [04:43<19:51, 14.71s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 19 -\tTraining Loss : 0.020894856352276274 \tValidation Loss : 0.008689385461807251\n",
            "Epoch 20 -\tTraining Loss : 0.02054473278257582 \tValidation Loss : 0.00944189133644104\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 20%|██        | 20/100 [04:59<20:08, 15.11s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 34.85777777777778 \tValidation Accuracy = 38.48 \tTest Accuracy Top1 = 39.35 \tTest Accuracy Top5 = 70.93\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 21%|██        | 21/100 [05:14<19:49, 15.06s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 21 -\tTraining Loss : 0.02021939148373074 \tValidation Loss : 0.008137980008125306\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 22/100 [05:29<19:28, 14.98s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 22 -\tTraining Loss : 0.01981480302810669 \tValidation Loss : 0.008813596105575562\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 23%|██▎       | 23/100 [05:43<19:11, 14.95s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 23 -\tTraining Loss : 0.019589054822921753 \tValidation Loss : 0.009176189947128295\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 24%|██▍       | 24/100 [05:58<18:46, 14.82s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 24 -\tTraining Loss : 0.01930124397807651 \tValidation Loss : 0.00813303050994873\n",
            "Epoch 25 -\tTraining Loss : 0.01895277431541019 \tValidation Loss : 0.007911120748519898\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 25%|██▌       | 25/100 [06:14<18:52, 15.09s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 39.437777777777775 \tValidation Accuracy = 48.22 \tTest Accuracy Top1 = 47.72 \tTest Accuracy Top5 = 78.77\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 26%|██▌       | 26/100 [06:28<18:24, 14.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 26 -\tTraining Loss : 0.01882143587536282 \tValidation Loss : 0.007787905979156494\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 27%|██▋       | 27/100 [06:43<17:59, 14.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 27 -\tTraining Loss : 0.018421299256218805 \tValidation Loss : 0.007529689264297485\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 28%|██▊       | 28/100 [06:57<17:37, 14.69s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 28 -\tTraining Loss : 0.01826275289853414 \tValidation Loss : 0.00753109519481659\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 29%|██▉       | 29/100 [07:12<17:30, 14.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 29 -\tTraining Loss : 0.017860274701648287 \tValidation Loss : 0.007790173029899597\n",
            "Epoch 30 -\tTraining Loss : 0.01769984141720666 \tValidation Loss : 0.007409048295021057\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 30%|███       | 30/100 [07:29<17:53, 15.34s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 43.34 \tValidation Accuracy = 49.62 \tTest Accuracy Top1 = 50.64 \tTest Accuracy Top5 = 80.36\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 31%|███       | 31/100 [07:44<17:43, 15.41s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 31 -\tTraining Loss : 0.017415317058563234 \tValidation Loss : 0.007455880784988403\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 32%|███▏      | 32/100 [07:59<17:17, 15.25s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 32 -\tTraining Loss : 0.01728771702448527 \tValidation Loss : 0.0074252817153930666\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 33%|███▎      | 33/100 [08:14<16:51, 15.10s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 33 -\tTraining Loss : 0.016867229233847723 \tValidation Loss : 0.0070954430103302\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▍      | 34/100 [08:29<16:29, 15.00s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 34 -\tTraining Loss : 0.01677017353905572 \tValidation Loss : 0.007187783622741699\n",
            "Epoch 35 -\tTraining Loss : 0.016423377463552685 \tValidation Loss : 0.007456514120101928\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 35%|███▌      | 35/100 [08:45<16:32, 15.28s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 47.39111111111111 \tValidation Accuracy = 49.74 \tTest Accuracy Top1 = 49.98 \tTest Accuracy Top5 = 79.98\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 36%|███▌      | 36/100 [09:00<16:11, 15.19s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 36 -\tTraining Loss : 0.016256451508733963 \tValidation Loss : 0.007114438581466675\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 37%|███▋      | 37/100 [09:15<15:57, 15.19s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 37 -\tTraining Loss : 0.015940875824292502 \tValidation Loss : 0.007094722509384155\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 38%|███▊      | 38/100 [09:30<15:45, 15.25s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 38 -\tTraining Loss : 0.01571665531264411 \tValidation Loss : 0.007092146277427673\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 39%|███▉      | 39/100 [09:45<15:27, 15.21s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 39 -\tTraining Loss : 0.015547085899776882 \tValidation Loss : 0.007112575030326843\n",
            "Epoch 40 -\tTraining Loss : 0.015263324851459927 \tValidation Loss : 0.006959748840332031\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 40%|████      | 40/100 [10:02<15:36, 15.60s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 51.111111111111114 \tValidation Accuracy = 52.34 \tTest Accuracy Top1 = 53.13 \tTest Accuracy Top5 = 81.89\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 41%|████      | 41/100 [10:18<15:20, 15.61s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 41 -\tTraining Loss : 0.015065324454837376 \tValidation Loss : 0.006962968444824219\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 42%|████▏     | 42/100 [10:33<14:58, 15.49s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 42 -\tTraining Loss : 0.01498107945919037 \tValidation Loss : 0.0070142798662185665\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 43%|████▎     | 43/100 [10:49<14:51, 15.64s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 43 -\tTraining Loss : 0.01471824676990509 \tValidation Loss : 0.0071511602163314815\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 44%|████▍     | 44/100 [11:04<14:28, 15.51s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 44 -\tTraining Loss : 0.014493769441710578 \tValidation Loss : 0.007084037780761719\n",
            "Epoch 45 -\tTraining Loss : 0.014309346114264595 \tValidation Loss : 0.006999078822135925\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▌     | 45/100 [11:20<14:27, 15.77s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 54.50888888888889 \tValidation Accuracy = 52.6 \tTest Accuracy Top1 = 53.42 \tTest Accuracy Top5 = 81.69\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 46%|████▌     | 46/100 [11:36<14:16, 15.86s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 46 -\tTraining Loss : 0.014141104412078857 \tValidation Loss : 0.006835877156257629\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 47%|████▋     | 47/100 [11:52<13:54, 15.74s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 47 -\tTraining Loss : 0.013960244141684638 \tValidation Loss : 0.007065034294128418\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 48%|████▊     | 48/100 [12:07<13:33, 15.64s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 48 -\tTraining Loss : 0.013649986362457275 \tValidation Loss : 0.007036815142631531\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 49%|████▉     | 49/100 [12:22<13:10, 15.50s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 49 -\tTraining Loss : 0.01356490482489268 \tValidation Loss : 0.008387112379074097\n",
            "Epoch 50 -\tTraining Loss : 0.013227195363574558 \tValidation Loss : 0.007017813348770142\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 50%|█████     | 50/100 [12:39<13:11, 15.84s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 58.13333333333333 \tValidation Accuracy = 52.58 \tTest Accuracy Top1 = 53.68 \tTest Accuracy Top5 = 82.68\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 51%|█████     | 51/100 [12:55<13:03, 15.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 51 -\tTraining Loss : 0.013264665974511041 \tValidation Loss : 0.007069250226020813\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 52%|█████▏    | 52/100 [13:11<12:36, 15.77s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 52 -\tTraining Loss : 0.01312017552057902 \tValidation Loss : 0.00691976478099823\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 53%|█████▎    | 53/100 [13:26<12:15, 15.66s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 53 -\tTraining Loss : 0.012830544551213583 \tValidation Loss : 0.006987027955055237\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 54%|█████▍    | 54/100 [13:41<11:56, 15.58s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 54 -\tTraining Loss : 0.012747071263525221 \tValidation Loss : 0.007041747307777404\n",
            "Epoch 55 -\tTraining Loss : 0.01249388821919759 \tValidation Loss : 0.007219422459602356\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 55%|█████▌    | 55/100 [13:58<11:56, 15.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 61.093333333333334 \tValidation Accuracy = 52.44 \tTest Accuracy Top1 = 53.37 \tTest Accuracy Top5 = 82.25\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 56/100 [14:13<11:29, 15.66s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 56 -\tTraining Loss : 0.012364290862613253 \tValidation Loss : 0.007106105256080628\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 57%|█████▋    | 57/100 [14:28<10:58, 15.31s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 57 -\tTraining Loss : 0.012344951033592224 \tValidation Loss : 0.007037007856369019\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 58%|█████▊    | 58/100 [14:42<10:35, 15.12s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 58 -\tTraining Loss : 0.01203794439898597 \tValidation Loss : 0.007129475831985473\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 59%|█████▉    | 59/100 [14:57<10:18, 15.08s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 59 -\tTraining Loss : 0.011976267250378926 \tValidation Loss : 0.007170891809463501\n",
            "Epoch 60 -\tTraining Loss : 0.011920453264978197 \tValidation Loss : 0.007127882528305054\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 60%|██████    | 60/100 [15:13<10:13, 15.34s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 63.56444444444445 \tValidation Accuracy = 53.68 \tTest Accuracy Top1 = 54.22 \tTest Accuracy Top5 = 82.38\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 61%|██████    | 61/100 [15:28<09:52, 15.18s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 61 -\tTraining Loss : 0.011724136572413975 \tValidation Loss : 0.0070395836353302\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 62%|██████▏   | 62/100 [15:43<09:29, 14.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 62 -\tTraining Loss : 0.011678292266527812 \tValidation Loss : 0.00716692590713501\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 63%|██████▎   | 63/100 [15:57<09:10, 14.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 63 -\tTraining Loss : 0.011471069463094076 \tValidation Loss : 0.007204153966903687\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 64%|██████▍   | 64/100 [16:12<08:55, 14.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 64 -\tTraining Loss : 0.011364275444878473 \tValidation Loss : 0.007201725172996521\n",
            "Epoch 65 -\tTraining Loss : 0.01116357523202896 \tValidation Loss : 0.007228329944610596\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 65%|██████▌   | 65/100 [16:28<08:49, 15.14s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 66.51555555555555 \tValidation Accuracy = 53.56 \tTest Accuracy Top1 = 54.39 \tTest Accuracy Top5 = 82.57\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 66%|██████▌   | 66/100 [16:43<08:31, 15.05s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 66 -\tTraining Loss : 0.011206442652808296 \tValidation Loss : 0.007259454989433288\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 67%|██████▋   | 67/100 [16:57<08:10, 14.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 67 -\tTraining Loss : 0.011070896730158064 \tValidation Loss : 0.007387973403930664\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 68%|██████▊   | 68/100 [17:12<07:57, 14.91s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 68 -\tTraining Loss : 0.010987802606158786 \tValidation Loss : 0.007325722622871399\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 69%|██████▉   | 69/100 [17:27<07:39, 14.83s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 69 -\tTraining Loss : 0.010857117446263631 \tValidation Loss : 0.007452685213088989\n",
            "Epoch 70 -\tTraining Loss : 0.010775198417239718 \tValidation Loss : 0.007264872574806213\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 70%|███████   | 70/100 [17:43<07:35, 15.17s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 67.96222222222222 \tValidation Accuracy = 53.98 \tTest Accuracy Top1 = 54.96 \tTest Accuracy Top5 = 83.02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 71%|███████   | 71/100 [17:58<07:16, 15.07s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 71 -\tTraining Loss : 0.0107848866754108 \tValidation Loss : 0.007399966454505921\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 72%|███████▏  | 72/100 [18:12<06:58, 14.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 72 -\tTraining Loss : 0.010676697038279639 \tValidation Loss : 0.007461007976531982\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 73%|███████▎  | 73/100 [18:27<06:39, 14.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 73 -\tTraining Loss : 0.010655036769972908 \tValidation Loss : 0.00748728301525116\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 74%|███████▍  | 74/100 [18:41<06:24, 14.77s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 74 -\tTraining Loss : 0.010531741393937005 \tValidation Loss : 0.007386577224731445\n",
            "Epoch 75 -\tTraining Loss : 0.010722751598887973 \tValidation Loss : 0.007457539129257202\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 75%|███████▌  | 75/100 [18:57<06:16, 15.05s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 68.56222222222222 \tValidation Accuracy = 54.32 \tTest Accuracy Top1 = 55.01 \tTest Accuracy Top5 = 82.74\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 76%|███████▌  | 76/100 [19:12<05:59, 14.96s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 76 -\tTraining Loss : 0.01056872910923428 \tValidation Loss : 0.007474843025207519\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 77%|███████▋  | 77/100 [19:26<05:40, 14.81s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 77 -\tTraining Loss : 0.010467257063918644 \tValidation Loss : 0.007459824514389038\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 78%|███████▊  | 78/100 [19:41<05:25, 14.79s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 78 -\tTraining Loss : 0.010378189472357432 \tValidation Loss : 0.007483423018455506\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 79%|███████▉  | 79/100 [19:56<05:10, 14.77s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 79 -\tTraining Loss : 0.010326143724388547 \tValidation Loss : 0.007424381852149963\n",
            "Epoch 80 -\tTraining Loss : 0.010367242756154802 \tValidation Loss : 0.007469363975524903\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 80%|████████  | 80/100 [20:11<04:59, 14.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 69.93111111111111 \tValidation Accuracy = 54.48 \tTest Accuracy Top1 = 55.34 \tTest Accuracy Top5 = 82.76\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 81%|████████  | 81/100 [20:26<04:45, 15.01s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 81 -\tTraining Loss : 0.010408314907550812 \tValidation Loss : 0.007499319100379944\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 82%|████████▏ | 82/100 [20:41<04:28, 14.94s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 82 -\tTraining Loss : 0.01032227138015959 \tValidation Loss : 0.0075156112670898435\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 83%|████████▎ | 83/100 [20:56<04:13, 14.92s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 83 -\tTraining Loss : 0.010270992363823785 \tValidation Loss : 0.00751179928779602\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 84%|████████▍ | 84/100 [21:10<03:55, 14.72s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 84 -\tTraining Loss : 0.010159902331564162 \tValidation Loss : 0.007526181745529175\n",
            "Epoch 85 -\tTraining Loss : 0.010244260725710127 \tValidation Loss : 0.00754995744228363\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 85%|████████▌ | 85/100 [21:26<03:46, 15.12s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 70.58444444444444 \tValidation Accuracy = 54.34 \tTest Accuracy Top1 = 55.12 \tTest Accuracy Top5 = 82.8\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 86%|████████▌ | 86/100 [21:41<03:30, 15.02s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 86 -\tTraining Loss : 0.010182086494233872 \tValidation Loss : 0.007556365346908569\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 87%|████████▋ | 87/100 [21:56<03:13, 14.87s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 87 -\tTraining Loss : 0.010140725588798524 \tValidation Loss : 0.007565750861167907\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 88%|████████▊ | 88/100 [22:11<02:58, 14.88s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 88 -\tTraining Loss : 0.010145326942867704 \tValidation Loss : 0.00756700496673584\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 89%|████████▉ | 89/100 [22:26<02:44, 14.93s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 89 -\tTraining Loss : 0.010255332488483853 \tValidation Loss : 0.00756876859664917\n",
            "Epoch 90 -\tTraining Loss : 0.010126727975739373 \tValidation Loss : 0.0075496413230895995\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 90%|█████████ | 90/100 [22:42<02:32, 15.27s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 71.05111111111111 \tValidation Accuracy = 54.66 \tTest Accuracy Top1 = 55.51 \tTest Accuracy Top5 = 82.86\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 91%|█████████ | 91/100 [22:57<02:17, 15.23s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 91 -\tTraining Loss : 0.010101225013203092 \tValidation Loss : 0.007538551378250122\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 92%|█████████▏| 92/100 [23:12<02:01, 15.14s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 92 -\tTraining Loss : 0.010131741049554614 \tValidation Loss : 0.007563983535766602\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 93%|█████████▎| 93/100 [23:27<01:45, 15.13s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 93 -\tTraining Loss : 0.010086655741267735 \tValidation Loss : 0.0075609858512878415\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 94%|█████████▍| 94/100 [23:42<01:30, 15.07s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 94 -\tTraining Loss : 0.010143635132577685 \tValidation Loss : 0.007595768928527832\n",
            "Epoch 95 -\tTraining Loss : 0.010010634609063467 \tValidation Loss : 0.007564482164382934\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 95%|█████████▌| 95/100 [23:58<01:17, 15.47s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 71.41555555555556 \tValidation Accuracy = 54.46 \tTest Accuracy Top1 = 55.62 \tTest Accuracy Top5 = 82.92\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 96%|█████████▌| 96/100 [24:13<01:01, 15.32s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 96 -\tTraining Loss : 0.01008514375421736 \tValidation Loss : 0.007577986335754395\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 97%|█████████▋| 97/100 [24:28<00:45, 15.12s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 97 -\tTraining Loss : 0.010103555011749268 \tValidation Loss : 0.007555558824539185\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 98%|█████████▊| 98/100 [24:43<00:30, 15.12s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 98 -\tTraining Loss : 0.010188403480582767 \tValidation Loss : 0.007564164209365845\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 99%|█████████▉| 99/100 [24:58<00:14, 14.99s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 99 -\tTraining Loss : 0.010219861441188388 \tValidation Loss : 0.0075800523757934574\n",
            "Epoch 100 -\tTraining Loss : 0.010082856223318311 \tValidation Loss : 0.007552847123146057\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 100/100 [25:14<00:00, 15.14s/it]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training Accuracy = 71.20444444444445 \tValidation Accuracy = 54.68 \tTest Accuracy Top1 = 55.7 \tTest Accuracy Top5 = 83.0\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "train_loader = DataLoader(train_set, batch_size=128, shuffle=True)\n",
        "validation_loader = DataLoader(validation_set, batch_size=256, shuffle=False)\n",
        "test_loader = DataLoader(test_set, batch_size=256, shuffle=False)\n",
        "\n",
        "optimizer = torch.optim.SGD\n",
        "scheduler = torch.optim.lr_scheduler.CosineAnnealingLR\n",
        "loss_fn = F.cross_entropy\n",
        "\n",
        "history3 = train(model3, optimizer, scheduler, loss_fn, train_loader, validation_loader, test_loader, learning_rate=0.01, num_epochs=100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_loss(history3['train_loss'], history3['val_loss'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_acc(history3['train_acc'], history3['val_acc'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_test(history3['test_acc1'], history3['test_acc5'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [],
      "source": [
        "with open('wide_laaresnet_history', 'wb') as f:\n",
        "  pickle.dump(history3, f)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
